
test_LCD_20251021.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b18  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003cb0  08003cb0  00004cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d08  08003d08  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003d08  08003d08  00004d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d10  08003d10  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d10  08003d10  00004d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d14  08003d14  00004d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d18  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  2000000c  08003d24  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08003d24  000053dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9b4  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b2  00000000  00000000  000109f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00012ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000755  00000000  00000000  00013538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162bd  00000000  00000000  00013c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0aa  00000000  00000000  00029f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087630  00000000  00000000  00035ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd624  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002598  00000000  00000000  000bd668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000bfc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003c98 	.word	0x08003c98

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003c98 	.word	0x08003c98

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <TFT_WriteCommand>:
// TFT LCD 내부 동작 함수
// =============================

// TFT에 명령어 전송
static void TFT_WriteCommand(uint8_t cmd)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
    // DC 핀을 LOW로 설정 -> 명령어 모드
    HAL_GPIO_WritePin(TFT_DC_GPIO_PORT, TFT_DC_PIN, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000514:	4806      	ldr	r0, [pc, #24]	@ (8000530 <TFT_WriteCommand+0x2c>)
 8000516:	f001 fa77 	bl	8001a08 <HAL_GPIO_WritePin>
    // SPI로 명령어 전송
    HAL_SPI_Transmit(&TFT_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800051a:	1df9      	adds	r1, r7, #7
 800051c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000520:	2201      	movs	r2, #1
 8000522:	4804      	ldr	r0, [pc, #16]	@ (8000534 <TFT_WriteCommand+0x30>)
 8000524:	f001 ffab 	bl	800247e <HAL_SPI_Transmit>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40020400 	.word	0x40020400
 8000534:	20000338 	.word	0x20000338

08000538 <TFT_WriteData>:

// TFT에 데이터 전송
static void TFT_WriteData(uint8_t* buffer, size_t buffer_size)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
    // DC 핀을 HIGH로 설정 -> 데이터 모드
    HAL_GPIO_WritePin(TFT_DC_GPIO_PORT, TFT_DC_PIN, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000548:	4810      	ldr	r0, [pc, #64]	@ (800058c <TFT_WriteData+0x54>)
 800054a:	f001 fa5d 	bl	8001a08 <HAL_GPIO_WritePin>

    // HAL_SPI_Transmit는 한 번에 64KB 이상 전송할 수 없으므로 분할 전송
    while (buffer_size > 0)
 800054e:	e015      	b.n	800057c <TFT_WriteData+0x44>
    {
        uint16_t chunk_size = buffer_size > 32768 ? 32768 : buffer_size; // 최대 32KB씩 전송
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000556:	bf28      	it	cs
 8000558:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 800055c:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&TFT_SPI_PORT, buffer, chunk_size, HAL_MAX_DELAY);
 800055e:	89fa      	ldrh	r2, [r7, #14]
 8000560:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	480a      	ldr	r0, [pc, #40]	@ (8000590 <TFT_WriteData+0x58>)
 8000568:	f001 ff89 	bl	800247e <HAL_SPI_Transmit>
        buffer += chunk_size;
 800056c:	89fb      	ldrh	r3, [r7, #14]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	607b      	str	r3, [r7, #4]
        buffer_size -= chunk_size;
 8000574:	89fb      	ldrh	r3, [r7, #14]
 8000576:	683a      	ldr	r2, [r7, #0]
 8000578:	1ad3      	subs	r3, r2, r3
 800057a:	603b      	str	r3, [r7, #0]
    while (buffer_size > 0)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1e6      	bne.n	8000550 <TFT_WriteData+0x18>
    }
}
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40020400 	.word	0x40020400
 8000590:	20000338 	.word	0x20000338

08000594 <TFT_SetAddressWindow>:

// 화면에서 그릴 영역(x0,y0 ~ x1,y1) 지정
static void TFT_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	4604      	mov	r4, r0
 800059c:	4608      	mov	r0, r1
 800059e:	4611      	mov	r1, r2
 80005a0:	461a      	mov	r2, r3
 80005a2:	4623      	mov	r3, r4
 80005a4:	80fb      	strh	r3, [r7, #6]
 80005a6:	4603      	mov	r3, r0
 80005a8:	80bb      	strh	r3, [r7, #4]
 80005aa:	460b      	mov	r3, r1
 80005ac:	807b      	strh	r3, [r7, #2]
 80005ae:	4613      	mov	r3, r2
 80005b0:	803b      	strh	r3, [r7, #0]
    // 컬럼 주소 설정 (가로)
    TFT_WriteCommand(0x2A); // CASET 명령
 80005b2:	202a      	movs	r0, #42	@ 0x2a
 80005b4:	f7ff ffa6 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	0a1b      	lsrs	r3, r3, #8
 80005bc:	b29b      	uxth	r3, r3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	733b      	strb	r3, [r7, #12]
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	737b      	strb	r3, [r7, #13]
 80005c8:	887b      	ldrh	r3, [r7, #2]
 80005ca:	0a1b      	lsrs	r3, r3, #8
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	73bb      	strb	r3, [r7, #14]
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	73fb      	strb	r3, [r7, #15]
        TFT_WriteData(data, sizeof(data));
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2104      	movs	r1, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ffaa 	bl	8000538 <TFT_WriteData>
    }

    // 행 주소 설정 (세로)
    TFT_WriteCommand(0x2B); // RASET 명령
 80005e4:	202b      	movs	r0, #43	@ 0x2b
 80005e6:	f7ff ff8d 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80005ea:	88bb      	ldrh	r3, [r7, #4]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	723b      	strb	r3, [r7, #8]
 80005f4:	88bb      	ldrh	r3, [r7, #4]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	727b      	strb	r3, [r7, #9]
 80005fa:	883b      	ldrh	r3, [r7, #0]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	b29b      	uxth	r3, r3
 8000600:	b2db      	uxtb	r3, r3
 8000602:	72bb      	strb	r3, [r7, #10]
 8000604:	883b      	ldrh	r3, [r7, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	72fb      	strb	r3, [r7, #11]
        TFT_WriteData(data, sizeof(data));
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2104      	movs	r1, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff91 	bl	8000538 <TFT_WriteData>
    }

    // RAM에 쓰기 시작
    TFT_WriteCommand(0x2C); // RAMWR 명령
 8000616:	202c      	movs	r0, #44	@ 0x2c
 8000618:	f7ff ff74 	bl	8000504 <TFT_WriteCommand>
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	bd90      	pop	{r4, r7, pc}

08000624 <TFT_Init>:

// =============================
// TFT 초기화 함수
// =============================
void TFT_Init()
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b09b      	sub	sp, #108	@ 0x6c
 8000628:	af00      	add	r7, sp, #0
    // TFT 선택(CS LOW)
    HAL_GPIO_WritePin(TFT_CS_GPIO_PORT, TFT_CS_PIN, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000630:	4892      	ldr	r0, [pc, #584]	@ (800087c <TFT_Init+0x258>)
 8000632:	f001 f9e9 	bl	8001a08 <HAL_GPIO_WritePin>

    // TFT 리셋
    HAL_GPIO_WritePin(TFT_RESET_GPIO_PORT, TFT_RESET_PIN, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063c:	488f      	ldr	r0, [pc, #572]	@ (800087c <TFT_Init+0x258>)
 800063e:	f001 f9e3 	bl	8001a08 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000642:	2005      	movs	r0, #5
 8000644:	f000 fe7c 	bl	8001340 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RESET_GPIO_PORT, TFT_RESET_PIN, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800064e:	488b      	ldr	r0, [pc, #556]	@ (800087c <TFT_Init+0x258>)
 8000650:	f001 f9da 	bl	8001a08 <HAL_GPIO_WritePin>

    // ILI9341 초기화 명령어 시퀀스
    // GitHub 예제 기준: https://github.com/martnak/STM32-ILI9341

    // 소프트웨어 리셋
    TFT_WriteCommand(0x01);
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ff55 	bl	8000504 <TFT_WriteCommand>
    HAL_Delay(1000);
 800065a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800065e:	f000 fe6f 	bl	8001340 <HAL_Delay>

    // 전원 제어 A
    TFT_WriteCommand(0xCB);
 8000662:	20cb      	movs	r0, #203	@ 0xcb
 8000664:	f7ff ff4e 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000668:	4a85      	ldr	r2, [pc, #532]	@ (8000880 <TFT_Init+0x25c>)
 800066a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800066e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000672:	6018      	str	r0, [r3, #0]
 8000674:	3304      	adds	r3, #4
 8000676:	7019      	strb	r1, [r3, #0]
        TFT_WriteData(data, sizeof(data));
 8000678:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800067c:	2105      	movs	r1, #5
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff5a 	bl	8000538 <TFT_WriteData>
    }

    // 전원 제어 B
    TFT_WriteCommand(0xCF);
 8000684:	20cf      	movs	r0, #207	@ 0xcf
 8000686:	f7ff ff3d 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 800068a:	4a7e      	ldr	r2, [pc, #504]	@ (8000884 <TFT_Init+0x260>)
 800068c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000690:	6812      	ldr	r2, [r2, #0]
 8000692:	4611      	mov	r1, r2
 8000694:	8019      	strh	r1, [r3, #0]
 8000696:	3302      	adds	r3, #2
 8000698:	0c12      	lsrs	r2, r2, #16
 800069a:	701a      	strb	r2, [r3, #0]
        TFT_WriteData(data, sizeof(data));
 800069c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006a0:	2103      	movs	r1, #3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff48 	bl	8000538 <TFT_WriteData>
    }

    // 드라이버 타이밍 제어 A
    TFT_WriteCommand(0xE8);
 80006a8:	20e8      	movs	r0, #232	@ 0xe8
 80006aa:	f7ff ff2b 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80006ae:	4a76      	ldr	r2, [pc, #472]	@ (8000888 <TFT_Init+0x264>)
 80006b0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	4611      	mov	r1, r2
 80006b8:	8019      	strh	r1, [r3, #0]
 80006ba:	3302      	adds	r3, #2
 80006bc:	0c12      	lsrs	r2, r2, #16
 80006be:	701a      	strb	r2, [r3, #0]
        TFT_WriteData(data, sizeof(data));
 80006c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006c4:	2103      	movs	r1, #3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff36 	bl	8000538 <TFT_WriteData>
    }

    // 드라이버 타이밍 제어 B
    TFT_WriteCommand(0xEA);
 80006cc:	20ea      	movs	r0, #234	@ 0xea
 80006ce:	f7ff ff19 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        TFT_WriteData(data, sizeof(data));
 80006d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff2a 	bl	8000538 <TFT_WriteData>
    }

    // 전원 ON 시퀀스 제어
    TFT_WriteCommand(0xED);
 80006e4:	20ed      	movs	r0, #237	@ 0xed
 80006e6:	f7ff ff0d 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80006ea:	4b68      	ldr	r3, [pc, #416]	@ (800088c <TFT_Init+0x268>)
 80006ec:	653b      	str	r3, [r7, #80]	@ 0x50
        TFT_WriteData(data, sizeof(data));
 80006ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80006f2:	2104      	movs	r1, #4
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff1f 	bl	8000538 <TFT_WriteData>
    }

    // 펌프 비율 제어
    TFT_WriteCommand(0xF7);
 80006fa:	20f7      	movs	r0, #247	@ 0xf7
 80006fc:	f7ff ff02 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8000700:	2320      	movs	r3, #32
 8000702:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        TFT_WriteData(data, sizeof(data));
 8000706:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800070a:	2101      	movs	r1, #1
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff13 	bl	8000538 <TFT_WriteData>
    }

    // 전원 제어 VRH
    TFT_WriteCommand(0xC0);
 8000712:	20c0      	movs	r0, #192	@ 0xc0
 8000714:	f7ff fef6 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8000718:	2323      	movs	r3, #35	@ 0x23
 800071a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        TFT_WriteData(data, sizeof(data));
 800071e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000722:	2101      	movs	r1, #1
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff07 	bl	8000538 <TFT_WriteData>
    }

    // 전원 제어 SAP/BT
    TFT_WriteCommand(0xC1);
 800072a:	20c1      	movs	r0, #193	@ 0xc1
 800072c:	f7ff feea 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000730:	2310      	movs	r3, #16
 8000732:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        TFT_WriteData(data, sizeof(data));
 8000736:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800073a:	2101      	movs	r1, #1
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fefb 	bl	8000538 <TFT_WriteData>
    }

    // VCM 제어
    TFT_WriteCommand(0xC5);
 8000742:	20c5      	movs	r0, #197	@ 0xc5
 8000744:	f7ff fede 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8000748:	f642 033e 	movw	r3, #10302	@ 0x283e
 800074c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        TFT_WriteData(data, sizeof(data));
 8000750:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000754:	2102      	movs	r1, #2
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff feee 	bl	8000538 <TFT_WriteData>
    }

    // VCM 제어 2
    TFT_WriteCommand(0xC7);
 800075c:	20c7      	movs	r0, #199	@ 0xc7
 800075e:	f7ff fed1 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000762:	2386      	movs	r3, #134	@ 0x86
 8000764:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        TFT_WriteData(data, sizeof(data));
 8000768:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800076c:	2101      	movs	r1, #1
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fee2 	bl	8000538 <TFT_WriteData>
    }

    // 메모리 액세스 제어 (화면 회전)
    TFT_WriteCommand(0x36);
 8000774:	2036      	movs	r0, #54	@ 0x36
 8000776:	f7ff fec5 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { TFT_ROTATION };
 800077a:	23e8      	movs	r3, #232	@ 0xe8
 800077c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        TFT_WriteData(data, sizeof(data));
 8000780:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000784:	2101      	movs	r1, #1
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fed6 	bl	8000538 <TFT_WriteData>
    }

    // 픽셀 포맷 16비트
    TFT_WriteCommand(0x3A);
 800078c:	203a      	movs	r0, #58	@ 0x3a
 800078e:	f7ff feb9 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000792:	2355      	movs	r3, #85	@ 0x55
 8000794:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        TFT_WriteData(data, sizeof(data));
 8000798:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800079c:	2101      	movs	r1, #1
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff feca 	bl	8000538 <TFT_WriteData>
    }

    // 프레임 비율 제어
    TFT_WriteCommand(0xB1);
 80007a4:	20b1      	movs	r0, #177	@ 0xb1
 80007a6:	f7ff fead 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80007aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007ae:	863b      	strh	r3, [r7, #48]	@ 0x30
        TFT_WriteData(data, sizeof(data));
 80007b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007b4:	2102      	movs	r1, #2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff febe 	bl	8000538 <TFT_WriteData>
    }

    // 디스플레이 기능 제어
    TFT_WriteCommand(0xB6);
 80007bc:	20b6      	movs	r0, #182	@ 0xb6
 80007be:	f7ff fea1 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80007c2:	4a33      	ldr	r2, [pc, #204]	@ (8000890 <TFT_Init+0x26c>)
 80007c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	4611      	mov	r1, r2
 80007cc:	8019      	strh	r1, [r3, #0]
 80007ce:	3302      	adds	r3, #2
 80007d0:	0c12      	lsrs	r2, r2, #16
 80007d2:	701a      	strb	r2, [r3, #0]
        TFT_WriteData(data, sizeof(data));
 80007d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007d8:	2103      	movs	r1, #3
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff feac 	bl	8000538 <TFT_WriteData>
    }

    // 3감마 함수 비활성화
    TFT_WriteCommand(0xF2);
 80007e0:	20f2      	movs	r0, #242	@ 0xf2
 80007e2:	f7ff fe8f 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80007e6:	2300      	movs	r3, #0
 80007e8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        TFT_WriteData(data, sizeof(data));
 80007ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007f0:	2101      	movs	r1, #1
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fea0 	bl	8000538 <TFT_WriteData>
    }

    // 감마 곡선 선택
    TFT_WriteCommand(0x26);
 80007f8:	2026      	movs	r0, #38	@ 0x26
 80007fa:	f7ff fe83 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80007fe:	2301      	movs	r3, #1
 8000800:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        TFT_WriteData(data, sizeof(data));
 8000804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000808:	2101      	movs	r1, #1
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fe94 	bl	8000538 <TFT_WriteData>
    }

    // 양(+) 감마 보정
    TFT_WriteCommand(0xE0);
 8000810:	20e0      	movs	r0, #224	@ 0xe0
 8000812:	f7ff fe77 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000816:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <TFT_Init+0x270>)
 8000818:	f107 0414 	add.w	r4, r7, #20
 800081c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800081e:	c407      	stmia	r4!, {r0, r1, r2}
 8000820:	8023      	strh	r3, [r4, #0]
 8000822:	3402      	adds	r4, #2
 8000824:	0c1b      	lsrs	r3, r3, #16
 8000826:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        TFT_WriteData(data, sizeof(data));
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	210f      	movs	r1, #15
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff fe82 	bl	8000538 <TFT_WriteData>
    }

    // 음(-) 감마 보정
    TFT_WriteCommand(0xE1);
 8000834:	20e1      	movs	r0, #225	@ 0xe1
 8000836:	f7ff fe65 	bl	8000504 <TFT_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <TFT_Init+0x274>)
 800083c:	1d3c      	adds	r4, r7, #4
 800083e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000840:	c407      	stmia	r4!, {r0, r1, r2}
 8000842:	8023      	strh	r3, [r4, #0]
 8000844:	3402      	adds	r4, #2
 8000846:	0c1b      	lsrs	r3, r3, #16
 8000848:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        TFT_WriteData(data, sizeof(data));
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	210f      	movs	r1, #15
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fe72 	bl	8000538 <TFT_WriteData>
    }

    // 슬립 모드 종료
    TFT_WriteCommand(0x11);
 8000854:	2011      	movs	r0, #17
 8000856:	f7ff fe55 	bl	8000504 <TFT_WriteCommand>
    HAL_Delay(120);
 800085a:	2078      	movs	r0, #120	@ 0x78
 800085c:	f000 fd70 	bl	8001340 <HAL_Delay>

    // 디스플레이 ON
    TFT_WriteCommand(0x29);
 8000860:	2029      	movs	r0, #41	@ 0x29
 8000862:	f7ff fe4f 	bl	8000504 <TFT_WriteCommand>

    // TFT 선택 해제(CS HIGH)
    HAL_GPIO_WritePin(TFT_CS_GPIO_PORT, TFT_CS_PIN, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086c:	4803      	ldr	r0, [pc, #12]	@ (800087c <TFT_Init+0x258>)
 800086e:	f001 f8cb 	bl	8001a08 <HAL_GPIO_WritePin>
}
 8000872:	bf00      	nop
 8000874:	376c      	adds	r7, #108	@ 0x6c
 8000876:	46bd      	mov	sp, r7
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	bf00      	nop
 800087c:	40020400 	.word	0x40020400
 8000880:	08003cb0 	.word	0x08003cb0
 8000884:	08003cb8 	.word	0x08003cb8
 8000888:	08003cbc 	.word	0x08003cbc
 800088c:	81120364 	.word	0x81120364
 8000890:	08003cc0 	.word	0x08003cc0
 8000894:	08003cc4 	.word	0x08003cc4
 8000898:	08003cd4 	.word	0x08003cd4

0800089c <TFT_FillRectangle>:
// 도형 출력 함수
// =============================

// 사각형 채우기
void TFT_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4604      	mov	r4, r0
 80008a4:	4608      	mov	r0, r1
 80008a6:	4611      	mov	r1, r2
 80008a8:	461a      	mov	r2, r3
 80008aa:	4623      	mov	r3, r4
 80008ac:	80fb      	strh	r3, [r7, #6]
 80008ae:	4603      	mov	r3, r0
 80008b0:	80bb      	strh	r3, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	807b      	strh	r3, [r7, #2]
 80008b6:	4613      	mov	r3, r2
 80008b8:	803b      	strh	r3, [r7, #0]
    // 화면 범위 체크
    if (x >= TFT_WIDTH || y >= TFT_HEIGHT) return;
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80008c0:	d257      	bcs.n	8000972 <TFT_FillRectangle+0xd6>
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	2bef      	cmp	r3, #239	@ 0xef
 80008c6:	d854      	bhi.n	8000972 <TFT_FillRectangle+0xd6>
    if (x + w > TFT_WIDTH) w = TFT_WIDTH - x;
 80008c8:	88fa      	ldrh	r2, [r7, #6]
 80008ca:	887b      	ldrh	r3, [r7, #2]
 80008cc:	4413      	add	r3, r2
 80008ce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80008d2:	dd03      	ble.n	80008dc <TFT_FillRectangle+0x40>
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80008da:	807b      	strh	r3, [r7, #2]
    if (y + h > TFT_HEIGHT) h = TFT_HEIGHT - y;
 80008dc:	88ba      	ldrh	r2, [r7, #4]
 80008de:	883b      	ldrh	r3, [r7, #0]
 80008e0:	4413      	add	r3, r2
 80008e2:	2bf0      	cmp	r3, #240	@ 0xf0
 80008e4:	dd03      	ble.n	80008ee <TFT_FillRectangle+0x52>
 80008e6:	88bb      	ldrh	r3, [r7, #4]
 80008e8:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80008ec:	803b      	strh	r3, [r7, #0]

    // TFT 선택(CS LOW)
    HAL_GPIO_WritePin(TFT_CS_GPIO_PORT, TFT_CS_PIN, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f4:	4821      	ldr	r0, [pc, #132]	@ (800097c <TFT_FillRectangle+0xe0>)
 80008f6:	f001 f887 	bl	8001a08 <HAL_GPIO_WritePin>

    // 주소 윈도우 설정
    TFT_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80008fa:	88fa      	ldrh	r2, [r7, #6]
 80008fc:	887b      	ldrh	r3, [r7, #2]
 80008fe:	4413      	add	r3, r2
 8000900:	b29b      	uxth	r3, r3
 8000902:	3b01      	subs	r3, #1
 8000904:	b29c      	uxth	r4, r3
 8000906:	88ba      	ldrh	r2, [r7, #4]
 8000908:	883b      	ldrh	r3, [r7, #0]
 800090a:	4413      	add	r3, r2
 800090c:	b29b      	uxth	r3, r3
 800090e:	3b01      	subs	r3, #1
 8000910:	b29b      	uxth	r3, r3
 8000912:	88b9      	ldrh	r1, [r7, #4]
 8000914:	88f8      	ldrh	r0, [r7, #6]
 8000916:	4622      	mov	r2, r4
 8000918:	f7ff fe3c 	bl	8000594 <TFT_SetAddressWindow>

    // 픽셀 데이터 전송
    uint8_t data[] = { color >> 8, color & 0xFF };
 800091c:	8c3b      	ldrh	r3, [r7, #32]
 800091e:	0a1b      	lsrs	r3, r3, #8
 8000920:	b29b      	uxth	r3, r3
 8000922:	b2db      	uxtb	r3, r3
 8000924:	723b      	strb	r3, [r7, #8]
 8000926:	8c3b      	ldrh	r3, [r7, #32]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	727b      	strb	r3, [r7, #9]
    HAL_GPIO_WritePin(TFT_DC_GPIO_PORT, TFT_DC_PIN, GPIO_PIN_SET); // 데이터 모드
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000932:	4812      	ldr	r0, [pc, #72]	@ (800097c <TFT_FillRectangle+0xe0>)
 8000934:	f001 f868 	bl	8001a08 <HAL_GPIO_WritePin>
    for (uint32_t i = 0; i < w * h; i++)
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e00a      	b.n	8000954 <TFT_FillRectangle+0xb8>
    {
        HAL_SPI_Transmit(&TFT_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800093e:	f107 0108 	add.w	r1, r7, #8
 8000942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000946:	2202      	movs	r2, #2
 8000948:	480d      	ldr	r0, [pc, #52]	@ (8000980 <TFT_FillRectangle+0xe4>)
 800094a:	f001 fd98 	bl	800247e <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < w * h; i++)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3301      	adds	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	883a      	ldrh	r2, [r7, #0]
 8000958:	fb02 f303 	mul.w	r3, r2, r3
 800095c:	461a      	mov	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4293      	cmp	r3, r2
 8000962:	d3ec      	bcc.n	800093e <TFT_FillRectangle+0xa2>
    }

    // TFT 선택 해제(CS HIGH)
    HAL_GPIO_WritePin(TFT_CS_GPIO_PORT, TFT_CS_PIN, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800096a:	4804      	ldr	r0, [pc, #16]	@ (800097c <TFT_FillRectangle+0xe0>)
 800096c:	f001 f84c 	bl	8001a08 <HAL_GPIO_WritePin>
 8000970:	e000      	b.n	8000974 <TFT_FillRectangle+0xd8>
    if (x >= TFT_WIDTH || y >= TFT_HEIGHT) return;
 8000972:	bf00      	nop
}
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	bd90      	pop	{r4, r7, pc}
 800097a:	bf00      	nop
 800097c:	40020400 	.word	0x40020400
 8000980:	20000338 	.word	0x20000338

08000984 <TFT_FillScreen>:

// 화면 전체 채우기
void TFT_FillScreen(uint16_t color)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af02      	add	r7, sp, #8
 800098a:	4603      	mov	r3, r0
 800098c:	80fb      	strh	r3, [r7, #6]
    TFT_FillRectangle(0, 0, TFT_WIDTH, TFT_HEIGHT, color);
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	23f0      	movs	r3, #240	@ 0xf0
 8000994:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000998:	2100      	movs	r1, #0
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ff7e 	bl	800089c <TFT_FillRectangle>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <Debug_PrintBuffer>:
    memset(img_buffer, 0, sizeof(img_buffer));
}

// 디버그 프린트 함수
void Debug_PrintBuffer(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
    for (int y = 0; y < IMG_H; y++) {
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	e029      	b.n	8000a08 <Debug_PrintBuffer+0x60>
        for (int x = 0; x < IMG_W; x++) {
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	e018      	b.n	80009ec <Debug_PrintBuffer+0x44>
            char c = (img_buffer[y][x] > 128) ? '#' : '.';
 80009ba:	4917      	ldr	r1, [pc, #92]	@ (8000a18 <Debug_PrintBuffer+0x70>)
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	4613      	mov	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	1a9b      	subs	r3, r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	18ca      	adds	r2, r1, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4413      	add	r3, r2
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b80      	cmp	r3, #128	@ 0x80
 80009d0:	d901      	bls.n	80009d6 <Debug_PrintBuffer+0x2e>
 80009d2:	2323      	movs	r3, #35	@ 0x23
 80009d4:	e000      	b.n	80009d8 <Debug_PrintBuffer+0x30>
 80009d6:	232e      	movs	r3, #46	@ 0x2e
 80009d8:	71bb      	strb	r3, [r7, #6]
            HAL_UART_Transmit(&huart2, (uint8_t*)&c, 1, 10);
 80009da:	1db9      	adds	r1, r7, #6
 80009dc:	230a      	movs	r3, #10
 80009de:	2201      	movs	r2, #1
 80009e0:	480e      	ldr	r0, [pc, #56]	@ (8000a1c <Debug_PrintBuffer+0x74>)
 80009e2:	f002 f965 	bl	8002cb0 <HAL_UART_Transmit>
        for (int x = 0; x < IMG_W; x++) {
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	3301      	adds	r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	2b1b      	cmp	r3, #27
 80009f0:	dde3      	ble.n	80009ba <Debug_PrintBuffer+0x12>
        }
        char newline = '\n';
 80009f2:	230a      	movs	r3, #10
 80009f4:	71fb      	strb	r3, [r7, #7]
        HAL_UART_Transmit(&huart2, (uint8_t*)&newline, 1, 10);
 80009f6:	1df9      	adds	r1, r7, #7
 80009f8:	230a      	movs	r3, #10
 80009fa:	2201      	movs	r2, #1
 80009fc:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <Debug_PrintBuffer+0x74>)
 80009fe:	f002 f957 	bl	8002cb0 <HAL_UART_Transmit>
    for (int y = 0; y < IMG_H; y++) {
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	3301      	adds	r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	2b1b      	cmp	r3, #27
 8000a0c:	ddd2      	ble.n	80009b4 <Debug_PrintBuffer+0xc>
    }
}
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000028 	.word	0x20000028
 8000a1c:	20000390 	.word	0x20000390

08000a20 <Clear_ImageBuffer>:

// 버퍼 초기화 함수
void Clear_ImageBuffer(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
    for (int y = 0; y < IMG_H; y++) {
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	e016      	b.n	8000a5a <Clear_ImageBuffer+0x3a>
        for (int x = 0; x < IMG_W; x++) {
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	e00d      	b.n	8000a4e <Clear_ImageBuffer+0x2e>
            img_buffer[y][x] = 0;  // 배경은 0
 8000a32:	490f      	ldr	r1, [pc, #60]	@ (8000a70 <Clear_ImageBuffer+0x50>)
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	4613      	mov	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	1a9b      	subs	r3, r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	18ca      	adds	r2, r1, r3
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < IMG_W; x++) {
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	2b1b      	cmp	r3, #27
 8000a52:	ddee      	ble.n	8000a32 <Clear_ImageBuffer+0x12>
    for (int y = 0; y < IMG_H; y++) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b1b      	cmp	r3, #27
 8000a5e:	dde5      	ble.n	8000a2c <Clear_ImageBuffer+0xc>
        }
    }
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000028 	.word	0x20000028

08000a74 <TFT_TouchPressed>:

// ==================================
// 터치 입력 확인 함수
// ==================================
static bool TFT_TouchPressed()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    // 터치 IRQ 핀을 읽어서 터치 여부 반환
    // LOW(RESET) 상태이면 터치됨
    return HAL_GPIO_ReadPin(TFT_TOUCH_IRQ_GPIO_PORT, TFT_TOUCH_IRQ_PIN) == GPIO_PIN_RESET;
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <TFT_TouchPressed+0x1c>)
 8000a7c:	f000 ffac 	bl	80019d8 <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	bf0c      	ite	eq
 8000a86:	2301      	moveq	r3, #1
 8000a88:	2300      	movne	r3, #0
 8000a8a:	b2db      	uxtb	r3, r3
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40020400 	.word	0x40020400

08000a94 <TFT_TouchGetCoordinates>:

// ==================================
// 터치 좌표 읽기 함수
// ==================================
bool TFT_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	@ 0x30
 8000a98:	af02      	add	r7, sp, #8
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    // ==================================
    // 터치 선택(CS LOW)
    // ==================================
    HAL_GPIO_WritePin(TFT_TOUCH_CS_GPIO_PORT, TFT_TOUCH_CS_PIN, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4857      	ldr	r0, [pc, #348]	@ (8000c00 <TFT_TouchGetCoordinates+0x16c>)
 8000aa4:	f000 ffb0 	bl	8001a08 <HAL_GPIO_WritePin>

    uint32_t avg_x = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	77fb      	strb	r3, [r7, #31]

    // ==================================
    // 여러 번 샘플링해서 평균 좌표 계산
    // ==================================
    for (uint8_t i = 0; i < 16; i++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	77bb      	strb	r3, [r7, #30]
 8000ab8:	e03f      	b.n	8000b3a <TFT_TouchGetCoordinates+0xa6>
    {
        // 터치가 안되면 바로 루프 종료
        if (!TFT_TouchPressed())
 8000aba:	f7ff ffdb 	bl	8000a74 <TFT_TouchPressed>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d13b      	bne.n	8000b42 <TFT_TouchGetCoordinates+0xae>
            break;

        nsamples++;
 8000aca:	7ffb      	ldrb	r3, [r7, #31]
 8000acc:	3301      	adds	r3, #1
 8000ace:	77fb      	strb	r3, [r7, #31]

        // Y 좌표 읽기
        HAL_SPI_Transmit(&TFT_TOUCH_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	494b      	ldr	r1, [pc, #300]	@ (8000c04 <TFT_TouchGetCoordinates+0x170>)
 8000ad8:	484b      	ldr	r0, [pc, #300]	@ (8000c08 <TFT_TouchGetCoordinates+0x174>)
 8000ada:	f001 fcd0 	bl	800247e <HAL_SPI_Transmit>
        uint8_t y_raw[2];
        HAL_SPI_TransmitReceive(&TFT_TOUCH_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8000ade:	f107 0210 	add.w	r2, r7, #16
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	2302      	movs	r3, #2
 8000aea:	4948      	ldr	r1, [pc, #288]	@ (8000c0c <TFT_TouchGetCoordinates+0x178>)
 8000aec:	4846      	ldr	r0, [pc, #280]	@ (8000c08 <TFT_TouchGetCoordinates+0x174>)
 8000aee:	f001 fe0a 	bl	8002706 <HAL_SPI_TransmitReceive>

        // X 좌표 읽기
        HAL_SPI_Transmit(&TFT_TOUCH_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000af6:	2201      	movs	r2, #1
 8000af8:	4945      	ldr	r1, [pc, #276]	@ (8000c10 <TFT_TouchGetCoordinates+0x17c>)
 8000afa:	4843      	ldr	r0, [pc, #268]	@ (8000c08 <TFT_TouchGetCoordinates+0x174>)
 8000afc:	f001 fcbf 	bl	800247e <HAL_SPI_Transmit>
        uint8_t x_raw[2];
        HAL_SPI_TransmitReceive(&TFT_TOUCH_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8000b00:	f107 020c 	add.w	r2, r7, #12
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	493f      	ldr	r1, [pc, #252]	@ (8000c0c <TFT_TouchGetCoordinates+0x178>)
 8000b0e:	483e      	ldr	r0, [pc, #248]	@ (8000c08 <TFT_TouchGetCoordinates+0x174>)
 8000b10:	f001 fdf9 	bl	8002706 <HAL_SPI_TransmitReceive>

        // 읽은 raw 값 누적
        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 8000b14:	7b3b      	ldrb	r3, [r7, #12]
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	7b7a      	ldrb	r2, [r7, #13]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b20:	4413      	add	r3, r2
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 8000b24:	7c3b      	ldrb	r3, [r7, #16]
 8000b26:	021b      	lsls	r3, r3, #8
 8000b28:	7c7a      	ldrb	r2, [r7, #17]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	4413      	add	r3, r2
 8000b32:	623b      	str	r3, [r7, #32]
    for (uint8_t i = 0; i < 16; i++)
 8000b34:	7fbb      	ldrb	r3, [r7, #30]
 8000b36:	3301      	adds	r3, #1
 8000b38:	77bb      	strb	r3, [r7, #30]
 8000b3a:	7fbb      	ldrb	r3, [r7, #30]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d9bc      	bls.n	8000aba <TFT_TouchGetCoordinates+0x26>
 8000b40:	e000      	b.n	8000b44 <TFT_TouchGetCoordinates+0xb0>
            break;
 8000b42:	bf00      	nop
    }

    // ==================================
    // 터치 선택 해제(CS HIGH)
    // ==================================
    HAL_GPIO_WritePin(TFT_TOUCH_CS_GPIO_PORT, TFT_TOUCH_CS_PIN, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2104      	movs	r1, #4
 8000b48:	482d      	ldr	r0, [pc, #180]	@ (8000c00 <TFT_TouchGetCoordinates+0x16c>)
 8000b4a:	f000 ff5d 	bl	8001a08 <HAL_GPIO_WritePin>

    // 샘플이 충분하지 않으면 터치 없다고 판단
    if (nsamples < 16)
 8000b4e:	7ffb      	ldrb	r3, [r7, #31]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d801      	bhi.n	8000b58 <TFT_TouchGetCoordinates+0xc4>
        return false;
 8000b54:	2300      	movs	r3, #0
 8000b56:	e04f      	b.n	8000bf8 <TFT_TouchGetCoordinates+0x164>

    // ==================================
    // 읽은 raw 좌표 정규화
    // ==================================
    uint32_t raw_x = (avg_x / 16);
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	091b      	lsrs	r3, r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
    if (raw_x < TFT_TOUCH_MIN_RAW_X) raw_x = TFT_TOUCH_MIN_RAW_X;
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d802      	bhi.n	8000b6e <TFT_TouchGetCoordinates+0xda>
 8000b68:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b6c:	61bb      	str	r3, [r7, #24]
    if (raw_x > TFT_TOUCH_MAX_RAW_X) raw_x = TFT_TOUCH_MAX_RAW_X;
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	f647 1218 	movw	r2, #31000	@ 0x7918
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d902      	bls.n	8000b7e <TFT_TouchGetCoordinates+0xea>
 8000b78:	f647 1318 	movw	r3, #31000	@ 0x7918
 8000b7c:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 8000b7e:	6a3b      	ldr	r3, [r7, #32]
 8000b80:	091b      	lsrs	r3, r3, #4
 8000b82:	617b      	str	r3, [r7, #20]
    if (raw_y < TFT_TOUCH_MIN_RAW_Y) raw_y = TFT_TOUCH_MIN_RAW_Y;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f640 42cb 	movw	r2, #3275	@ 0xccb
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d802      	bhi.n	8000b94 <TFT_TouchGetCoordinates+0x100>
 8000b8e:	f640 43cc 	movw	r3, #3276	@ 0xccc
 8000b92:	617b      	str	r3, [r7, #20]
    if (raw_y > TFT_TOUCH_MAX_RAW_Y) raw_y = TFT_TOUCH_MAX_RAW_Y;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f247 529e 	movw	r2, #30110	@ 0x759e
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d902      	bls.n	8000ba4 <TFT_TouchGetCoordinates+0x110>
 8000b9e:	f247 539e 	movw	r3, #30110	@ 0x759e
 8000ba2:	617b      	str	r3, [r7, #20]

    // ==================================
    // 화면 크기에 맞게 좌표 스케일링
    // ==================================
    *x = (raw_x - TFT_TOUCH_MIN_RAW_X) * TFT_TOUCH_SCALE_X / (TFT_TOUCH_MAX_RAW_X - TFT_TOUCH_MIN_RAW_X);
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	f5a3 23af 	sub.w	r3, r3, #358400	@ 0x57800
 8000bb2:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 8000bb6:	4a17      	ldr	r2, [pc, #92]	@ (8000c14 <TFT_TouchGetCoordinates+0x180>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	0b9b      	lsrs	r3, r3, #14
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	801a      	strh	r2, [r3, #0]
    *y = (raw_y - TFT_TOUCH_MIN_RAW_Y) * TFT_TOUCH_SCALE_Y / (TFT_TOUCH_MAX_RAW_Y - TFT_TOUCH_MIN_RAW_Y);
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	019b      	lsls	r3, r3, #6
 8000bce:	f5a3 237f 	sub.w	r3, r3, #1044480	@ 0xff000
 8000bd2:	f5a3 6370 	sub.w	r3, r3, #3840	@ 0xf00
 8000bd6:	085b      	lsrs	r3, r3, #1
 8000bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c18 <TFT_TouchGetCoordinates+0x184>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	0a9b      	lsrs	r3, r3, #10
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	801a      	strh	r2, [r3, #0]

    // 화면 좌우 반전 보정
    *y = TFT_TOUCH_SCALE_Y - 1 - *y;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	801a      	strh	r2, [r3, #0]

    return true;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3728      	adds	r7, #40	@ 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40020400 	.word	0x40020400
 8000c04:	08003ce4 	.word	0x08003ce4
 8000c08:	20000338 	.word	0x20000338
 8000c0c:	08003ce8 	.word	0x08003ce8
 8000c10:	08003cec 	.word	0x08003cec
 8000c14:	8e2e0727 	.word	0x8e2e0727
 8000c18:	1389c755 	.word	0x1389c755

08000c1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	4b33      	ldr	r3, [pc, #204]	@ (8000d04 <MX_GPIO_Init+0xe8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a32      	ldr	r2, [pc, #200]	@ (8000d04 <MX_GPIO_Init+0xe8>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b30      	ldr	r3, [pc, #192]	@ (8000d04 <MX_GPIO_Init+0xe8>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b2c      	ldr	r3, [pc, #176]	@ (8000d04 <MX_GPIO_Init+0xe8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a2b      	ldr	r2, [pc, #172]	@ (8000d04 <MX_GPIO_Init+0xe8>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b29      	ldr	r3, [pc, #164]	@ (8000d04 <MX_GPIO_Init+0xe8>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <MX_GPIO_Init+0xe8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a24      	ldr	r2, [pc, #144]	@ (8000d04 <MX_GPIO_Init+0xe8>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <MX_GPIO_Init+0xe8>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f24e 0104 	movw	r1, #57348	@ 0xe004
 8000c8c:	481e      	ldr	r0, [pc, #120]	@ (8000d08 <MX_GPIO_Init+0xec>)
 8000c8e:	f000 febb 	bl	8001a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c92:	2302      	movs	r3, #2
 8000c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4818      	ldr	r0, [pc, #96]	@ (8000d08 <MX_GPIO_Init+0xec>)
 8000ca8:	f000 fd12 	bl	80016d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cac:	f24e 0304 	movw	r3, #57348	@ 0xe004
 8000cb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4810      	ldr	r0, [pc, #64]	@ (8000d08 <MX_GPIO_Init+0xec>)
 8000cc6:	f000 fd03 	bl	80016d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480b      	ldr	r0, [pc, #44]	@ (8000d0c <MX_GPIO_Init+0xf0>)
 8000ce0:	f000 fcf6 	bl	80016d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4804      	ldr	r0, [pc, #16]	@ (8000d08 <MX_GPIO_Init+0xec>)
 8000cf8:	f000 fcea 	bl	80016d0 <HAL_GPIO_Init>

}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020400 	.word	0x40020400
 8000d0c:	40020000 	.word	0x40020000

08000d10 <init>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


void init()
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  //TFT Unselect
  HAL_GPIO_WritePin(TFT_CS_GPIO_PORT, TFT_CS_PIN, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d1a:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <init+0x24>)
 8000d1c:	f000 fe74 	bl	8001a08 <HAL_GPIO_WritePin>
  // TFT Touch Unselect
  HAL_GPIO_WritePin(TFT_TOUCH_CS_GPIO_PORT, TFT_TOUCH_CS_PIN, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2104      	movs	r1, #4
 8000d24:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <init+0x24>)
 8000d26:	f000 fe6f 	bl	8001a08 <HAL_GPIO_WritePin>

  TFT_Init();
 8000d2a:	f7ff fc7b 	bl	8000624 <TFT_Init>
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40020400 	.word	0x40020400

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3e:	f000 fa8d 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d42:	f000 f887 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d46:	f7ff ff69 	bl	8000c1c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d4a:	f000 f8f1 	bl	8000f30 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d4e:	f000 f9e1 	bl	8001114 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // LCD 초기화
  init();
 8000d52:	f7ff ffdd 	bl	8000d10 <init>

  // LCD 색상 표현
  TFT_FillScreen(TFT_RED);
 8000d56:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000d5a:	f7ff fe13 	bl	8000984 <TFT_FillScreen>
  HAL_Delay(1000);
 8000d5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d62:	f000 faed 	bl	8001340 <HAL_Delay>
//  TFT_FillScreen(TFT_BLUE);
//  HAL_Delay(1000);
//  TFT_FillScreen(TFT_COLOR565(244,100,159));
//  HAL_Delay(1000);
  TFT_FillScreen(TFT_WHITE);
 8000d66:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000d6a:	f7ff fe0b 	bl	8000984 <TFT_FillScreen>
  HAL_Delay(1000);
 8000d6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d72:	f000 fae5 	bl	8001340 <HAL_Delay>

    // 터치 입력
    uint16_t x,y;

    // 터치 입력 처리
    if (TFT_TouchGetCoordinates(&x, &y))
 8000d76:	1dba      	adds	r2, r7, #6
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fe88 	bl	8000a94 <TFT_TouchGetCoordinates>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d03a      	beq.n	8000e00 <main+0xc8>
    {
      uint16_t lcd_x = 320 - y;
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000d90:	81fb      	strh	r3, [r7, #14]
      uint16_t lcd_y = 240 - x;
 8000d92:	893b      	ldrh	r3, [r7, #8]
 8000d94:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000d98:	81bb      	strh	r3, [r7, #12]
      TFT_FillRectangle(lcd_x, lcd_y, 4, 4, TFT_BLACK);
 8000d9a:	89b9      	ldrh	r1, [r7, #12]
 8000d9c:	89f8      	ldrh	r0, [r7, #14]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2304      	movs	r3, #4
 8000da4:	2204      	movs	r2, #4
 8000da6:	f7ff fd79 	bl	800089c <TFT_FillRectangle>

      if (lcd_x < 240 && lcd_y < 320)
 8000daa:	89fb      	ldrh	r3, [r7, #14]
 8000dac:	2bef      	cmp	r3, #239	@ 0xef
 8000dae:	d827      	bhi.n	8000e00 <main+0xc8>
 8000db0:	89bb      	ldrh	r3, [r7, #12]
 8000db2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000db6:	d223      	bcs.n	8000e00 <main+0xc8>
      {
        uint8_t bx = (lcd_x * IMG_W) / 240;
 8000db8:	89fa      	ldrh	r2, [r7, #14]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	1a9b      	subs	r3, r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e40 <main+0x108>)
 8000dc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc8:	441a      	add	r2, r3
 8000dca:	11d2      	asrs	r2, r2, #7
 8000dcc:	17db      	asrs	r3, r3, #31
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	72fb      	strb	r3, [r7, #11]
        uint8_t by = (lcd_y * IMG_H) / 320;
 8000dd2:	89ba      	ldrh	r2, [r7, #12]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4a19      	ldr	r2, [pc, #100]	@ (8000e44 <main+0x10c>)
 8000dde:	fb82 1203 	smull	r1, r2, r2, r3
 8000de2:	11d2      	asrs	r2, r2, #7
 8000de4:	17db      	asrs	r3, r3, #31
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	72bb      	strb	r3, [r7, #10]
        img_buffer[by][bx] = 255;
 8000dea:	7aba      	ldrb	r2, [r7, #10]
 8000dec:	7af9      	ldrb	r1, [r7, #11]
 8000dee:	4816      	ldr	r0, [pc, #88]	@ (8000e48 <main+0x110>)
 8000df0:	4613      	mov	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	1a9b      	subs	r3, r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4403      	add	r3, r0
 8000dfa:	440b      	add	r3, r1
 8000dfc:	22ff      	movs	r2, #255	@ 0xff
 8000dfe:	701a      	strb	r2, [r3, #0]
      }
    }

    // 버튼1 (예: PB3) → 버퍼 출력
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8000e00:	2108      	movs	r1, #8
 8000e02:	4812      	ldr	r0, [pc, #72]	@ (8000e4c <main+0x114>)
 8000e04:	f000 fde8 	bl	80019d8 <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d105      	bne.n	8000e1a <main+0xe2>
      Debug_PrintBuffer();
 8000e0e:	f7ff fdcb 	bl	80009a8 <Debug_PrintBuffer>
      HAL_Delay(500); // 디바운스
 8000e12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e16:	f000 fa93 	bl	8001340 <HAL_Delay>
    }

    // 버튼2 (예: PA10) → LCD & 버퍼 초기화
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_RESET) {
 8000e1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e1e:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <main+0x118>)
 8000e20:	f000 fdda 	bl	80019d8 <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1a5      	bne.n	8000d76 <main+0x3e>
      TFT_FillScreen(TFT_WHITE);  // LCD 초기화
 8000e2a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000e2e:	f7ff fda9 	bl	8000984 <TFT_FillScreen>
      Clear_ImageBuffer();        // 버퍼 초기화
 8000e32:	f7ff fdf5 	bl	8000a20 <Clear_ImageBuffer>
      HAL_Delay(500);             // 디바운스
 8000e36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e3a:	f000 fa81 	bl	8001340 <HAL_Delay>
  {
 8000e3e:	e79a      	b.n	8000d76 <main+0x3e>
 8000e40:	88888889 	.word	0x88888889
 8000e44:	66666667 	.word	0x66666667
 8000e48:	20000028 	.word	0x20000028
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40020000 	.word	0x40020000

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b094      	sub	sp, #80	@ 0x50
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	2230      	movs	r2, #48	@ 0x30
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f002 feec 	bl	8003c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	4b27      	ldr	r3, [pc, #156]	@ (8000f1c <SystemClock_Config+0xc8>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	4a26      	ldr	r2, [pc, #152]	@ (8000f1c <SystemClock_Config+0xc8>)
 8000e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e88:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <SystemClock_Config+0xc8>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	4b21      	ldr	r3, [pc, #132]	@ (8000f20 <SystemClock_Config+0xcc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a20      	ldr	r2, [pc, #128]	@ (8000f20 <SystemClock_Config+0xcc>)
 8000e9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <SystemClock_Config+0xcc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eb4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ebe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000ec8:	2364      	movs	r3, #100	@ 0x64
 8000eca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed4:	f107 0320 	add.w	r3, r7, #32
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fdaf 	bl	8001a3c <HAL_RCC_OscConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ee4:	f000 f81e 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee8:	230f      	movs	r3, #15
 8000eea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eec:	2302      	movs	r3, #2
 8000eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	2103      	movs	r1, #3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 f811 	bl	8001f2c <HAL_RCC_ClockConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f10:	f000 f808 	bl	8000f24 <Error_Handler>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3750      	adds	r7, #80	@ 0x50
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40007000 	.word	0x40007000

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <Error_Handler+0x8>

08000f30 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f34:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f36:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <MX_SPI1_Init+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f42:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f64:	2230      	movs	r2, #48	@ 0x30
 8000f66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f74:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f7c:	220a      	movs	r2, #10
 8000f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f82:	f001 f9f3 	bl	800236c <HAL_SPI_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f8c:	f7ff ffca 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000338 	.word	0x20000338
 8000f98:	40013000 	.word	0x40013000

08000f9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	@ 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	@ (8001020 <HAL_SPI_MspInit+0x84>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12b      	bne.n	8001016 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	@ (8001024 <HAL_SPI_MspInit+0x88>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	4a17      	ldr	r2, [pc, #92]	@ (8001024 <HAL_SPI_MspInit+0x88>)
 8000fc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <HAL_SPI_MspInit+0x88>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <HAL_SPI_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <HAL_SPI_MspInit+0x88>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <HAL_SPI_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ff6:	23e0      	movs	r3, #224	@ 0xe0
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001006:	2305      	movs	r3, #5
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <HAL_SPI_MspInit+0x8c>)
 8001012:	f000 fb5d 	bl	80016d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	@ 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40013000 	.word	0x40013000
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <HAL_MspInit+0x4c>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	4a0f      	ldr	r2, [pc, #60]	@ (8001078 <HAL_MspInit+0x4c>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001040:	6453      	str	r3, [r2, #68]	@ 0x44
 8001042:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <HAL_MspInit+0x4c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <HAL_MspInit+0x4c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <HAL_MspInit+0x4c>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800105c:	6413      	str	r3, [r2, #64]	@ 0x40
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_MspInit+0x4c>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <NMI_Handler+0x4>

08001084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <MemManage_Handler+0x4>

08001094 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d2:	f000 f915 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <USART2_IRQHandler+0x10>)
 80010e2:	f001 fe71 	bl	8002dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000390 	.word	0x20000390

080010f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <SystemInit+0x20>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010fa:	4a05      	ldr	r2, [pc, #20]	@ (8001110 <SystemInit+0x20>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 800111a:	4a12      	ldr	r2, [pc, #72]	@ (8001164 <MX_USART2_UART_Init+0x50>)
 800111c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 800114c:	f001 fd60 	bl	8002c10 <HAL_UART_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001156:	f7ff fee5 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000390 	.word	0x20000390
 8001164:	40004400 	.word	0x40004400

08001168 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	@ 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1d      	ldr	r2, [pc, #116]	@ (80011fc <HAL_UART_MspInit+0x94>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d133      	bne.n	80011f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <HAL_UART_MspInit+0x98>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a1b      	ldr	r2, [pc, #108]	@ (8001200 <HAL_UART_MspInit+0x98>)
 8001194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_UART_MspInit+0x98>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <HAL_UART_MspInit+0x98>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a14      	ldr	r2, [pc, #80]	@ (8001200 <HAL_UART_MspInit+0x98>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_UART_MspInit+0x98>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011c2:	230c      	movs	r3, #12
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d2:	2307      	movs	r3, #7
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4809      	ldr	r0, [pc, #36]	@ (8001204 <HAL_UART_MspInit+0x9c>)
 80011de:	f000 fa77 	bl	80016d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2026      	movs	r0, #38	@ 0x26
 80011e8:	f000 f9a9 	bl	800153e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011ec:	2026      	movs	r0, #38	@ 0x26
 80011ee:	f000 f9c2 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	@ 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40004400 	.word	0x40004400
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001240 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800120c:	f7ff ff70 	bl	80010f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	@ (8001248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	@ (8001254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001236:	f002 fd0b 	bl	8003c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff fd7d 	bl	8000d38 <main>
  bx  lr    
 800123e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800124c:	08003d18 	.word	0x08003d18
  ldr r2, =_sbss
 8001250:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001254:	200003dc 	.word	0x200003dc

08001258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>
	...

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001260:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <HAL_Init+0x40>)
 8001266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800126c:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <HAL_Init+0x40>)
 8001272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	4b08      	ldr	r3, [pc, #32]	@ (800129c <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	@ (800129c <HAL_Init+0x40>)
 800127e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 f94f 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	200f      	movs	r0, #15
 800128c:	f000 f808 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001290:	f7ff fecc 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023c00 	.word	0x40023c00

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_InitTick+0x54>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_InitTick+0x58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f967 	bl	8001592 <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00e      	b.n	80012ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d80a      	bhi.n	80012ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	2200      	movs	r2, #0
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012dc:	f000 f92f 	bl	800153e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4a06      	ldr	r2, [pc, #24]	@ (80012fc <HAL_InitTick+0x5c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000004 	.word	0x20000004

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008
 8001324:	200003d8 	.word	0x200003d8

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200003d8 	.word	0x200003d8

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff ffee 	bl	8001328 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001358:	d005      	beq.n	8001366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <HAL_Delay+0x44>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001366:	bf00      	nop
 8001368:	f7ff ffde 	bl	8001328 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f7      	bhi.n	8001368 <HAL_Delay+0x28>
  {
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db0b      	blt.n	8001416 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	4907      	ldr	r1, [pc, #28]	@ (8001424 <__NVIC_EnableIRQ+0x38>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	@ (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	@ (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	@ 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	@ 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f4:	d301      	bcc.n	80014fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00f      	b.n	800151a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <SysTick_Config+0x40>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001502:	210f      	movs	r1, #15
 8001504:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001508:	f7ff ff8e 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <SysTick_Config+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001512:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <SysTick_Config+0x40>)
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010

08001528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff29 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001550:	f7ff ff3e 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 8001554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f7ff ff8e 	bl	800147c <NVIC_EncodePriority>
 8001560:	4602      	mov	r2, r0
 8001562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff5d 	bl	8001428 <__NVIC_SetPriority>
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff31 	bl	80013ec <__NVIC_EnableIRQ>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ffa2 	bl	80014e4 <SysTick_Config>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff feb6 	bl	8001328 <HAL_GetTick>
 80015bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d008      	beq.n	80015dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2280      	movs	r2, #128	@ 0x80
 80015ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e052      	b.n	8001682 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0216 	bic.w	r2, r2, #22
 80015ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <HAL_DMA_Abort+0x62>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001608:	2b00      	cmp	r3, #0
 800160a:	d007      	beq.n	800161c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0208 	bic.w	r2, r2, #8
 800161a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162c:	e013      	b.n	8001656 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800162e:	f7ff fe7b 	bl	8001328 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b05      	cmp	r3, #5
 800163a:	d90c      	bls.n	8001656 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2220      	movs	r2, #32
 8001640:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2203      	movs	r2, #3
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e015      	b.n	8001682 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e4      	bne.n	800162e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001668:	223f      	movs	r2, #63	@ 0x3f
 800166a:	409a      	lsls	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d004      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2280      	movs	r2, #128	@ 0x80
 80016a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e00c      	b.n	80016c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2205      	movs	r2, #5
 80016ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	@ 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e159      	b.n	80019a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ec:	2201      	movs	r2, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 8148 	bne.w	800199a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b01      	cmp	r3, #1
 8001714:	d005      	beq.n	8001722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171e:	2b02      	cmp	r3, #2
 8001720:	d130      	bne.n	8001784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001758:	2201      	movs	r2, #1
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 0201 	and.w	r2, r3, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b03      	cmp	r3, #3
 800178e:	d017      	beq.n	80017c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d123      	bne.n	8001814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3208      	adds	r2, #8
 80017d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	220f      	movs	r2, #15
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	08da      	lsrs	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3208      	adds	r2, #8
 800180e:	69b9      	ldr	r1, [r7, #24]
 8001810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0203 	and.w	r2, r3, #3
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80a2 	beq.w	800199a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b57      	ldr	r3, [pc, #348]	@ (80019b8 <HAL_GPIO_Init+0x2e8>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	4a56      	ldr	r2, [pc, #344]	@ (80019b8 <HAL_GPIO_Init+0x2e8>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001864:	6453      	str	r3, [r2, #68]	@ 0x44
 8001866:	4b54      	ldr	r3, [pc, #336]	@ (80019b8 <HAL_GPIO_Init+0x2e8>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001872:	4a52      	ldr	r2, [pc, #328]	@ (80019bc <HAL_GPIO_Init+0x2ec>)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a49      	ldr	r2, [pc, #292]	@ (80019c0 <HAL_GPIO_Init+0x2f0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d019      	beq.n	80018d2 <HAL_GPIO_Init+0x202>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a48      	ldr	r2, [pc, #288]	@ (80019c4 <HAL_GPIO_Init+0x2f4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d013      	beq.n	80018ce <HAL_GPIO_Init+0x1fe>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a47      	ldr	r2, [pc, #284]	@ (80019c8 <HAL_GPIO_Init+0x2f8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00d      	beq.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a46      	ldr	r2, [pc, #280]	@ (80019cc <HAL_GPIO_Init+0x2fc>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d007      	beq.n	80018c6 <HAL_GPIO_Init+0x1f6>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a45      	ldr	r2, [pc, #276]	@ (80019d0 <HAL_GPIO_Init+0x300>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d101      	bne.n	80018c2 <HAL_GPIO_Init+0x1f2>
 80018be:	2304      	movs	r3, #4
 80018c0:	e008      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018c2:	2307      	movs	r3, #7
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018c6:	2303      	movs	r3, #3
 80018c8:	e004      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e002      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018d2:	2300      	movs	r3, #0
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	f002 0203 	and.w	r2, r2, #3
 80018da:	0092      	lsls	r2, r2, #2
 80018dc:	4093      	lsls	r3, r2
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e4:	4935      	ldr	r1, [pc, #212]	@ (80019bc <HAL_GPIO_Init+0x2ec>)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3302      	adds	r3, #2
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f2:	4b38      	ldr	r3, [pc, #224]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001916:	4a2f      	ldr	r2, [pc, #188]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800191c:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001940:	4a24      	ldr	r2, [pc, #144]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001946:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800196a:	4a1a      	ldr	r2, [pc, #104]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001970:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001994:	4a0f      	ldr	r2, [pc, #60]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3301      	adds	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	f67f aea2 	bls.w	80016ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3724      	adds	r7, #36	@ 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40013800 	.word	0x40013800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40020800 	.word	0x40020800
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40013c00 	.word	0x40013c00

080019d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	887b      	ldrh	r3, [r7, #2]
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	e001      	b.n	80019fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
 8001a14:	4613      	mov	r3, r2
 8001a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a18:	787b      	ldrb	r3, [r7, #1]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1e:	887a      	ldrh	r2, [r7, #2]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a24:	e003      	b.n	8001a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	041a      	lsls	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	619a      	str	r2, [r3, #24]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e267      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d075      	beq.n	8001b46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a5a:	4b88      	ldr	r3, [pc, #544]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d00c      	beq.n	8001a80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a66:	4b85      	ldr	r3, [pc, #532]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d112      	bne.n	8001a98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a72:	4b82      	ldr	r3, [pc, #520]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a7e:	d10b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	4b7e      	ldr	r3, [pc, #504]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d05b      	beq.n	8001b44 <HAL_RCC_OscConfig+0x108>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d157      	bne.n	8001b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e242      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x74>
 8001aa2:	4b76      	ldr	r3, [pc, #472]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a75      	ldr	r2, [pc, #468]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e01d      	b.n	8001aec <HAL_RCC_OscConfig+0xb0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x98>
 8001aba:	4b70      	ldr	r3, [pc, #448]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6f      	ldr	r2, [pc, #444]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6c      	ldr	r2, [pc, #432]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0xb0>
 8001ad4:	4b69      	ldr	r3, [pc, #420]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a68      	ldr	r2, [pc, #416]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b66      	ldr	r3, [pc, #408]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a65      	ldr	r2, [pc, #404]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fc18 	bl	8001328 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fc14 	bl	8001328 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	@ 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e207      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0xc0>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fc04 	bl	8001328 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fc00 	bl	8001328 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	@ 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1f3      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	4b51      	ldr	r3, [pc, #324]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0xe8>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d063      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b52:	4b4a      	ldr	r3, [pc, #296]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5e:	4b47      	ldr	r3, [pc, #284]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d11c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6a:	4b44      	ldr	r3, [pc, #272]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	4b41      	ldr	r3, [pc, #260]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_RCC_OscConfig+0x152>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1c7      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4937      	ldr	r1, [pc, #220]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	e03a      	b.n	8001c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b34      	ldr	r3, [pc, #208]	@ (8001c80 <HAL_RCC_OscConfig+0x244>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fbb9 	bl	8001328 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff fbb5 	bl	8001328 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1a8      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4925      	ldr	r1, [pc, #148]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e015      	b.n	8001c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <HAL_RCC_OscConfig+0x244>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fb98 	bl	8001328 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fb94 	bl	8001328 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e187      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d036      	beq.n	8001c94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d016      	beq.n	8001c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_RCC_OscConfig+0x248>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff fb78 	bl	8001328 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fb74 	bl	8001328 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e167      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x200>
 8001c5a:	e01b      	b.n	8001c94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_RCC_OscConfig+0x248>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fb61 	bl	8001328 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	e00e      	b.n	8001c88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fb5d 	bl	8001328 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d907      	bls.n	8001c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e150      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	42470000 	.word	0x42470000
 8001c84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	4b88      	ldr	r3, [pc, #544]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ea      	bne.n	8001c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8097 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca6:	4b81      	ldr	r3, [pc, #516]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10f      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	4a7c      	ldr	r2, [pc, #496]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc2:	4b7a      	ldr	r3, [pc, #488]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	4b77      	ldr	r3, [pc, #476]	@ (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d118      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cde:	4b74      	ldr	r3, [pc, #464]	@ (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a73      	ldr	r2, [pc, #460]	@ (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cea:	f7ff fb1d 	bl	8001328 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf2:	f7ff fb19 	bl	8001328 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e10c      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	4b6a      	ldr	r3, [pc, #424]	@ (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2ea>
 8001d18:	4b64      	ldr	r3, [pc, #400]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1c:	4a63      	ldr	r2, [pc, #396]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d24:	e01c      	b.n	8001d60 <HAL_RCC_OscConfig+0x324>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x30c>
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d32:	4a5e      	ldr	r2, [pc, #376]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3e:	4a5b      	ldr	r2, [pc, #364]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0x324>
 8001d48:	4b58      	ldr	r3, [pc, #352]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4c:	4a57      	ldr	r2, [pc, #348]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d54:	4b55      	ldr	r3, [pc, #340]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d58:	4a54      	ldr	r2, [pc, #336]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d5a:	f023 0304 	bic.w	r3, r3, #4
 8001d5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d015      	beq.n	8001d94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff fade 	bl	8001328 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff fada 	bl	8001328 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0cb      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d86:	4b49      	ldr	r3, [pc, #292]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0ee      	beq.n	8001d70 <HAL_RCC_OscConfig+0x334>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7ff fac8 	bl	8001328 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fac4 	bl	8001328 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0b5      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db2:	4b3e      	ldr	r3, [pc, #248]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ee      	bne.n	8001d9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc4:	4b39      	ldr	r3, [pc, #228]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	4a38      	ldr	r2, [pc, #224]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80a1 	beq.w	8001f1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dda:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d05c      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d141      	bne.n	8001e72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b31      	ldr	r3, [pc, #196]	@ (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fa98 	bl	8001328 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff fa94 	bl	8001328 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e087      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	4b27      	ldr	r3, [pc, #156]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	019b      	lsls	r3, r3, #6
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	491b      	ldr	r1, [pc, #108]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e44:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fa6d 	bl	8001328 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff fa69 	bl	8001328 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e05c      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e64:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x416>
 8001e70:	e054      	b.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff fa56 	bl	8001328 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff fa52 	bl	8001328 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e045      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x444>
 8001e9e:	e03d      	b.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e038      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <HAL_RCC_OscConfig+0x4ec>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d028      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d121      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d11a      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ee8:	4013      	ands	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d111      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efe:	085b      	lsrs	r3, r3, #1
 8001f00:	3b01      	subs	r3, #1
 8001f02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0cc      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4b68      	ldr	r3, [pc, #416]	@ (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d90c      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b65      	ldr	r3, [pc, #404]	@ (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b63      	ldr	r3, [pc, #396]	@ (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b8      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f80:	4b59      	ldr	r3, [pc, #356]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a58      	ldr	r2, [pc, #352]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f98:	4b53      	ldr	r3, [pc, #332]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b50      	ldr	r3, [pc, #320]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	494d      	ldr	r1, [pc, #308]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d044      	beq.n	800204c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b47      	ldr	r3, [pc, #284]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d119      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e07f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fea:	4b3f      	ldr	r3, [pc, #252]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e06f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e067      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200a:	4b37      	ldr	r3, [pc, #220]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0203 	bic.w	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4934      	ldr	r1, [pc, #208]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800201c:	f7ff f984 	bl	8001328 <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	e00a      	b.n	800203a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002024:	f7ff f980 	bl	8001328 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e04f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 020c 	and.w	r2, r3, #12
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d1eb      	bne.n	8002024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800204c:	4b25      	ldr	r3, [pc, #148]	@ (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d20c      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b22      	ldr	r3, [pc, #136]	@ (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e032      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4916      	ldr	r1, [pc, #88]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209e:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	490e      	ldr	r1, [pc, #56]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b2:	f000 f821 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	490a      	ldr	r1, [pc, #40]	@ (80020ec <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	5ccb      	ldrb	r3, [r1, r3]
 80020c6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ca:	4a09      	ldr	r2, [pc, #36]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f8e4 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023c00 	.word	0x40023c00
 80020e8:	40023800 	.word	0x40023800
 80020ec:	08003cf0 	.word	0x08003cf0
 80020f0:	20000000 	.word	0x20000000
 80020f4:	20000004 	.word	0x20000004

080020f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020fc:	b094      	sub	sp, #80	@ 0x50
 80020fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002110:	4b79      	ldr	r3, [pc, #484]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b08      	cmp	r3, #8
 800211a:	d00d      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x40>
 800211c:	2b08      	cmp	r3, #8
 800211e:	f200 80e1 	bhi.w	80022e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x34>
 8002126:	2b04      	cmp	r3, #4
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x3a>
 800212a:	e0db      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800212c:	4b73      	ldr	r3, [pc, #460]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x204>)
 800212e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002130:	e0db      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002132:	4b73      	ldr	r3, [pc, #460]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x208>)
 8002134:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002136:	e0d8      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002138:	4b6f      	ldr	r3, [pc, #444]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002140:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002142:	4b6d      	ldr	r3, [pc, #436]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d063      	beq.n	8002216 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214e:	4b6a      	ldr	r3, [pc, #424]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	099b      	lsrs	r3, r3, #6
 8002154:	2200      	movs	r2, #0
 8002156:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002158:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800215a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800215c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002160:	633b      	str	r3, [r7, #48]	@ 0x30
 8002162:	2300      	movs	r3, #0
 8002164:	637b      	str	r3, [r7, #52]	@ 0x34
 8002166:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800216a:	4622      	mov	r2, r4
 800216c:	462b      	mov	r3, r5
 800216e:	f04f 0000 	mov.w	r0, #0
 8002172:	f04f 0100 	mov.w	r1, #0
 8002176:	0159      	lsls	r1, r3, #5
 8002178:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800217c:	0150      	lsls	r0, r2, #5
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4621      	mov	r1, r4
 8002184:	1a51      	subs	r1, r2, r1
 8002186:	6139      	str	r1, [r7, #16]
 8002188:	4629      	mov	r1, r5
 800218a:	eb63 0301 	sbc.w	r3, r3, r1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800219c:	4659      	mov	r1, fp
 800219e:	018b      	lsls	r3, r1, #6
 80021a0:	4651      	mov	r1, sl
 80021a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a6:	4651      	mov	r1, sl
 80021a8:	018a      	lsls	r2, r1, #6
 80021aa:	4651      	mov	r1, sl
 80021ac:	ebb2 0801 	subs.w	r8, r2, r1
 80021b0:	4659      	mov	r1, fp
 80021b2:	eb63 0901 	sbc.w	r9, r3, r1
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ca:	4690      	mov	r8, r2
 80021cc:	4699      	mov	r9, r3
 80021ce:	4623      	mov	r3, r4
 80021d0:	eb18 0303 	adds.w	r3, r8, r3
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	462b      	mov	r3, r5
 80021d8:	eb49 0303 	adc.w	r3, r9, r3
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021ea:	4629      	mov	r1, r5
 80021ec:	024b      	lsls	r3, r1, #9
 80021ee:	4621      	mov	r1, r4
 80021f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021f4:	4621      	mov	r1, r4
 80021f6:	024a      	lsls	r2, r1, #9
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021fe:	2200      	movs	r2, #0
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002204:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002208:	f7fd ffe6 	bl	80001d8 <__aeabi_uldivmod>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4613      	mov	r3, r2
 8002212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002214:	e058      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002216:	4b38      	ldr	r3, [pc, #224]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	099b      	lsrs	r3, r3, #6
 800221c:	2200      	movs	r2, #0
 800221e:	4618      	mov	r0, r3
 8002220:	4611      	mov	r1, r2
 8002222:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
 800222c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002230:	4642      	mov	r2, r8
 8002232:	464b      	mov	r3, r9
 8002234:	f04f 0000 	mov.w	r0, #0
 8002238:	f04f 0100 	mov.w	r1, #0
 800223c:	0159      	lsls	r1, r3, #5
 800223e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002242:	0150      	lsls	r0, r2, #5
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4641      	mov	r1, r8
 800224a:	ebb2 0a01 	subs.w	sl, r2, r1
 800224e:	4649      	mov	r1, r9
 8002250:	eb63 0b01 	sbc.w	fp, r3, r1
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002260:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002264:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002268:	ebb2 040a 	subs.w	r4, r2, sl
 800226c:	eb63 050b 	sbc.w	r5, r3, fp
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	00eb      	lsls	r3, r5, #3
 800227a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800227e:	00e2      	lsls	r2, r4, #3
 8002280:	4614      	mov	r4, r2
 8002282:	461d      	mov	r5, r3
 8002284:	4643      	mov	r3, r8
 8002286:	18e3      	adds	r3, r4, r3
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	464b      	mov	r3, r9
 800228c:	eb45 0303 	adc.w	r3, r5, r3
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800229e:	4629      	mov	r1, r5
 80022a0:	028b      	lsls	r3, r1, #10
 80022a2:	4621      	mov	r1, r4
 80022a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022a8:	4621      	mov	r1, r4
 80022aa:	028a      	lsls	r2, r1, #10
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022b2:	2200      	movs	r2, #0
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	61fa      	str	r2, [r7, #28]
 80022b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022bc:	f7fd ff8c 	bl	80001d8 <__aeabi_uldivmod>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4613      	mov	r3, r2
 80022c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	0c1b      	lsrs	r3, r3, #16
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	3301      	adds	r3, #1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80022d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022e2:	e002      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e4:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x204>)
 80022e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3750      	adds	r7, #80	@ 0x50
 80022f0:	46bd      	mov	sp, r7
 80022f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	00f42400 	.word	0x00f42400
 8002300:	007a1200 	.word	0x007a1200

08002304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <HAL_RCC_GetHCLKFreq+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000

0800231c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002320:	f7ff fff0 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b05      	ldr	r3, [pc, #20]	@ (800233c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	0a9b      	lsrs	r3, r3, #10
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	4903      	ldr	r1, [pc, #12]	@ (8002340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40023800 	.word	0x40023800
 8002340:	08003d00 	.word	0x08003d00

08002344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002348:	f7ff ffdc 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	0b5b      	lsrs	r3, r3, #13
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4903      	ldr	r1, [pc, #12]	@ (8002368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40023800 	.word	0x40023800
 8002368:	08003d00 	.word	0x08003d00

0800236c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e07b      	b.n	8002476 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	2b00      	cmp	r3, #0
 8002384:	d108      	bne.n	8002398 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800238e:	d009      	beq.n	80023a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
 8002396:	e005      	b.n	80023a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe fdec 	bl	8000f9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002428:	ea42 0103 	orr.w	r1, r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	f003 0104 	and.w	r1, r3, #4
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	f003 0210 	and.w	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002464:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b088      	sub	sp, #32
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	4613      	mov	r3, r2
 800248c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800248e:	f7fe ff4b 	bl	8001328 <HAL_GetTick>
 8002492:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d001      	beq.n	80024a8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80024a4:	2302      	movs	r3, #2
 80024a6:	e12a      	b.n	80026fe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_SPI_Transmit+0x36>
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e122      	b.n	80026fe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_SPI_Transmit+0x48>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e11b      	b.n	80026fe <HAL_SPI_Transmit+0x280>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2203      	movs	r2, #3
 80024d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	88fa      	ldrh	r2, [r7, #6]
 80024e6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	88fa      	ldrh	r2, [r7, #6]
 80024ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002514:	d10f      	bne.n	8002536 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002524:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002534:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002540:	2b40      	cmp	r3, #64	@ 0x40
 8002542:	d007      	beq.n	8002554 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002552:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800255c:	d152      	bne.n	8002604 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_SPI_Transmit+0xee>
 8002566:	8b7b      	ldrh	r3, [r7, #26]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d145      	bne.n	80025f8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	881a      	ldrh	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	1c9a      	adds	r2, r3, #2
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002590:	e032      	b.n	80025f8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b02      	cmp	r3, #2
 800259e:	d112      	bne.n	80025c6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	881a      	ldrh	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	1c9a      	adds	r2, r3, #2
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025c4:	e018      	b.n	80025f8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025c6:	f7fe feaf 	bl	8001328 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d803      	bhi.n	80025de <HAL_SPI_Transmit+0x160>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025dc:	d102      	bne.n	80025e4 <HAL_SPI_Transmit+0x166>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e082      	b.n	80026fe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1c7      	bne.n	8002592 <HAL_SPI_Transmit+0x114>
 8002602:	e053      	b.n	80026ac <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_SPI_Transmit+0x194>
 800260c:	8b7b      	ldrh	r3, [r7, #26]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d147      	bne.n	80026a2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	330c      	adds	r3, #12
 800261c:	7812      	ldrb	r2, [r2, #0]
 800261e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002638:	e033      	b.n	80026a2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b02      	cmp	r3, #2
 8002646:	d113      	bne.n	8002670 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	330c      	adds	r3, #12
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800266e:	e018      	b.n	80026a2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002670:	f7fe fe5a 	bl	8001328 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d803      	bhi.n	8002688 <HAL_SPI_Transmit+0x20a>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002686:	d102      	bne.n	800268e <HAL_SPI_Transmit+0x210>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e02d      	b.n	80026fe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1c6      	bne.n	800263a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	6839      	ldr	r1, [r7, #0]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fa59 	bl	8002b68 <SPI_EndRxTxTransaction>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80026fc:	2300      	movs	r3, #0
  }
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b08a      	sub	sp, #40	@ 0x28
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002714:	2301      	movs	r3, #1
 8002716:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002718:	f7fe fe06 	bl	8001328 <HAL_GetTick>
 800271c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002724:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002730:	7ffb      	ldrb	r3, [r7, #31]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d00c      	beq.n	8002750 <HAL_SPI_TransmitReceive+0x4a>
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800273c:	d106      	bne.n	800274c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d102      	bne.n	800274c <HAL_SPI_TransmitReceive+0x46>
 8002746:	7ffb      	ldrb	r3, [r7, #31]
 8002748:	2b04      	cmp	r3, #4
 800274a:	d001      	beq.n	8002750 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800274c:	2302      	movs	r3, #2
 800274e:	e17f      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_SPI_TransmitReceive+0x5c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_SPI_TransmitReceive+0x5c>
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e174      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x6e>
 8002770:	2302      	movs	r3, #2
 8002772:	e16d      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x34a>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b04      	cmp	r3, #4
 8002786:	d003      	beq.n	8002790 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2205      	movs	r2, #5
 800278c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	887a      	ldrh	r2, [r7, #2]
 80027a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	887a      	ldrh	r2, [r7, #2]
 80027b2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d0:	2b40      	cmp	r3, #64	@ 0x40
 80027d2:	d007      	beq.n	80027e4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027ec:	d17e      	bne.n	80028ec <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_SPI_TransmitReceive+0xf6>
 80027f6:	8afb      	ldrh	r3, [r7, #22]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d16c      	bne.n	80028d6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002800:	881a      	ldrh	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	1c9a      	adds	r2, r3, #2
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002820:	e059      	b.n	80028d6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b02      	cmp	r3, #2
 800282e:	d11b      	bne.n	8002868 <HAL_SPI_TransmitReceive+0x162>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <HAL_SPI_TransmitReceive+0x162>
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	2b01      	cmp	r3, #1
 800283e:	d113      	bne.n	8002868 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	881a      	ldrh	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002850:	1c9a      	adds	r2, r3, #2
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d119      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x1a4>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d014      	beq.n	80028aa <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288a:	b292      	uxth	r2, r2
 800288c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002892:	1c9a      	adds	r2, r3, #2
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028a6:	2301      	movs	r3, #1
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028aa:	f7fe fd3d 	bl	8001328 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d80d      	bhi.n	80028d6 <HAL_SPI_TransmitReceive+0x1d0>
 80028ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028c0:	d009      	beq.n	80028d6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0bc      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1a0      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x11c>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d19b      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x11c>
 80028ea:	e082      	b.n	80029f2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_SPI_TransmitReceive+0x1f4>
 80028f4:	8afb      	ldrh	r3, [r7, #22]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d171      	bne.n	80029de <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	330c      	adds	r3, #12
 8002904:	7812      	ldrb	r2, [r2, #0]
 8002906:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002920:	e05d      	b.n	80029de <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b02      	cmp	r3, #2
 800292e:	d11c      	bne.n	800296a <HAL_SPI_TransmitReceive+0x264>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d017      	beq.n	800296a <HAL_SPI_TransmitReceive+0x264>
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	2b01      	cmp	r3, #1
 800293e:	d114      	bne.n	800296a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	7812      	ldrb	r2, [r2, #0]
 800294c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d119      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x2a6>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d014      	beq.n	80029ac <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029a8:	2301      	movs	r3, #1
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029ac:	f7fe fcbc 	bl	8001328 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d803      	bhi.n	80029c4 <HAL_SPI_TransmitReceive+0x2be>
 80029bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029c2:	d102      	bne.n	80029ca <HAL_SPI_TransmitReceive+0x2c4>
 80029c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e038      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d19c      	bne.n	8002922 <HAL_SPI_TransmitReceive+0x21c>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d197      	bne.n	8002922 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029f2:	6a3a      	ldr	r2, [r7, #32]
 80029f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f8b6 	bl	8002b68 <SPI_EndRxTxTransaction>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e01d      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
  }
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3728      	adds	r7, #40	@ 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a68:	f7fe fc5e 	bl	8001328 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	4413      	add	r3, r2
 8002a76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a78:	f7fe fc56 	bl	8001328 <HAL_GetTick>
 8002a7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a7e:	4b39      	ldr	r3, [pc, #228]	@ (8002b64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	015b      	lsls	r3, r3, #5
 8002a84:	0d1b      	lsrs	r3, r3, #20
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a8e:	e055      	b.n	8002b3c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a96:	d051      	beq.n	8002b3c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a98:	f7fe fc46 	bl	8001328 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d902      	bls.n	8002aae <SPI_WaitFlagStateUntilTimeout+0x56>
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d13d      	bne.n	8002b2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002abc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ac6:	d111      	bne.n	8002aec <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ad0:	d004      	beq.n	8002adc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ada:	d107      	bne.n	8002aec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002aea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002af4:	d10f      	bne.n	8002b16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e018      	b.n	8002b5c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	e002      	b.n	8002b3c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d19a      	bne.n	8002a90 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000000 	.word	0x20000000

08002b68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff ff6a 	bl	8002a58 <SPI_WaitFlagStateUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e032      	b.n	8002c00 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <SPI_EndRxTxTransaction+0xa0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c0c <SPI_EndRxTxTransaction+0xa4>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	0d5b      	lsrs	r3, r3, #21
 8002ba6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bb8:	d112      	bne.n	8002be0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2180      	movs	r1, #128	@ 0x80
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7ff ff47 	bl	8002a58 <SPI_WaitFlagStateUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d016      	beq.n	8002bfe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd4:	f043 0220 	orr.w	r2, r3, #32
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e00f      	b.n	8002c00 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf6:	2b80      	cmp	r3, #128	@ 0x80
 8002bf8:	d0f2      	beq.n	8002be0 <SPI_EndRxTxTransaction+0x78>
 8002bfa:	e000      	b.n	8002bfe <SPI_EndRxTxTransaction+0x96>
        break;
 8002bfc:	bf00      	nop
  }

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	165e9f81 	.word	0x165e9f81

08002c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e042      	b.n	8002ca8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe fa96 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2224      	movs	r2, #36	@ 0x24
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fd7f 	bl	8003758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	@ 0x28
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d175      	bne.n	8002dbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_UART_Transmit+0x2c>
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e06e      	b.n	8002dbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2221      	movs	r2, #33	@ 0x21
 8002cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cee:	f7fe fb1b 	bl	8001328 <HAL_GetTick>
 8002cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	88fa      	ldrh	r2, [r7, #6]
 8002cf8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	88fa      	ldrh	r2, [r7, #6]
 8002cfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d08:	d108      	bne.n	8002d1c <HAL_UART_Transmit+0x6c>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	e003      	b.n	8002d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d24:	e02e      	b.n	8002d84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2180      	movs	r1, #128	@ 0x80
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fb1d 	bl	8003370 <UART_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e03a      	b.n	8002dbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	3302      	adds	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	e007      	b.n	8002d76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	3301      	adds	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1cb      	bne.n	8002d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2200      	movs	r2, #0
 8002d96:	2140      	movs	r1, #64	@ 0x40
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fae9 	bl	8003370 <UART_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e006      	b.n	8002dbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b0ba      	sub	sp, #232	@ 0xe8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10f      	bne.n	8002e2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_UART_IRQHandler+0x66>
 8002e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fbd7 	bl	80035da <UART_Receive_IT>
      return;
 8002e2c:	e273      	b.n	8003316 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80de 	beq.w	8002ff4 <HAL_UART_IRQHandler+0x22c>
 8002e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80d1 	beq.w	8002ff4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <HAL_UART_IRQHandler+0xae>
 8002e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	f043 0201 	orr.w	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <HAL_UART_IRQHandler+0xd2>
 8002e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	f043 0202 	orr.w	r2, r3, #2
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <HAL_UART_IRQHandler+0xf6>
 8002ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	f043 0204 	orr.w	r2, r3, #4
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d011      	beq.n	8002eee <HAL_UART_IRQHandler+0x126>
 8002eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee6:	f043 0208 	orr.w	r2, r3, #8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 820a 	beq.w	800330c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_UART_IRQHandler+0x14e>
 8002f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fb62 	bl	80035da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f20:	2b40      	cmp	r3, #64	@ 0x40
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <HAL_UART_IRQHandler+0x17a>
 8002f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d04f      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fa6d 	bl	8003422 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	2b40      	cmp	r3, #64	@ 0x40
 8002f54:	d141      	bne.n	8002fda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3314      	adds	r3, #20
 8002f5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f64:	e853 3f00 	ldrex	r3, [r3]
 8002f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3314      	adds	r3, #20
 8002f7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f92:	e841 2300 	strex	r3, r2, [r1]
 8002f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1d9      	bne.n	8002f56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d013      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fae:	4a8a      	ldr	r2, [pc, #552]	@ (80031d8 <HAL_UART_IRQHandler+0x410>)
 8002fb0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fb67 	bl	800168a <HAL_DMA_Abort_IT>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd0:	e00e      	b.n	8002ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f9b6 	bl	8003344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd8:	e00a      	b.n	8002ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f9b2 	bl	8003344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe0:	e006      	b.n	8002ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f9ae 	bl	8003344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002fee:	e18d      	b.n	800330c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff0:	bf00      	nop
    return;
 8002ff2:	e18b      	b.n	800330c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	f040 8167 	bne.w	80032cc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8160 	beq.w	80032cc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800300c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 8159 	beq.w	80032cc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303a:	2b40      	cmp	r3, #64	@ 0x40
 800303c:	f040 80ce 	bne.w	80031dc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800304c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80a9 	beq.w	80031a8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800305a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800305e:	429a      	cmp	r2, r3
 8003060:	f080 80a2 	bcs.w	80031a8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800306a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003076:	f000 8088 	beq.w	800318a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	330c      	adds	r3, #12
 8003080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003088:	e853 3f00 	ldrex	r3, [r3]
 800308c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003090:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1d9      	bne.n	800307a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3314      	adds	r3, #20
 80030cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3314      	adds	r3, #20
 80030e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e1      	bne.n	80030c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3314      	adds	r3, #20
 8003108:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3314      	adds	r3, #20
 8003122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003126:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003128:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800312c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e3      	bne.n	8003102 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	330c      	adds	r3, #12
 800314e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003152:	e853 3f00 	ldrex	r3, [r3]
 8003156:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800315a:	f023 0310 	bic.w	r3, r3, #16
 800315e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	330c      	adds	r3, #12
 8003168:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800316c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800316e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003172:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800317a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e3      	bne.n	8003148 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe fa10 	bl	80015aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2202      	movs	r2, #2
 800318e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003198:	b29b      	uxth	r3, r3
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	b29b      	uxth	r3, r3
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f8d9 	bl	8003358 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80031a6:	e0b3      	b.n	8003310 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031b0:	429a      	cmp	r2, r3
 80031b2:	f040 80ad 	bne.w	8003310 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031c0:	f040 80a6 	bne.w	8003310 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031ce:	4619      	mov	r1, r3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f8c1 	bl	8003358 <HAL_UARTEx_RxEventCallback>
      return;
 80031d6:	e09b      	b.n	8003310 <HAL_UART_IRQHandler+0x548>
 80031d8:	080034e9 	.word	0x080034e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 808e 	beq.w	8003314 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80031f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8089 	beq.w	8003314 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003218:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003226:	647a      	str	r2, [r7, #68]	@ 0x44
 8003228:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800322c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e3      	bne.n	8003202 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3314      	adds	r3, #20
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	623b      	str	r3, [r7, #32]
   return(result);
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3314      	adds	r3, #20
 800325a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800325e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003260:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800326c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e3      	bne.n	800323a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	e853 3f00 	ldrex	r3, [r3]
 800328e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0310 	bic.w	r3, r3, #16
 8003296:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	330c      	adds	r3, #12
 80032a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032a4:	61fa      	str	r2, [r7, #28]
 80032a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a8:	69b9      	ldr	r1, [r7, #24]
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	e841 2300 	strex	r3, r2, [r1]
 80032b0:	617b      	str	r3, [r7, #20]
   return(result);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e3      	bne.n	8003280 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032c2:	4619      	mov	r1, r3
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f847 	bl	8003358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032ca:	e023      	b.n	8003314 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d009      	beq.n	80032ec <HAL_UART_IRQHandler+0x524>
 80032d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f910 	bl	800350a <UART_Transmit_IT>
    return;
 80032ea:	e014      	b.n	8003316 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00e      	beq.n	8003316 <HAL_UART_IRQHandler+0x54e>
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f950 	bl	80035aa <UART_EndTransmit_IT>
    return;
 800330a:	e004      	b.n	8003316 <HAL_UART_IRQHandler+0x54e>
    return;
 800330c:	bf00      	nop
 800330e:	e002      	b.n	8003316 <HAL_UART_IRQHandler+0x54e>
      return;
 8003310:	bf00      	nop
 8003312:	e000      	b.n	8003316 <HAL_UART_IRQHandler+0x54e>
      return;
 8003314:	bf00      	nop
  }
}
 8003316:	37e8      	adds	r7, #232	@ 0xe8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	4613      	mov	r3, r2
 800337e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003380:	e03b      	b.n	80033fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003388:	d037      	beq.n	80033fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fd ffcd 	bl	8001328 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	6a3a      	ldr	r2, [r7, #32]
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e03a      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d023      	beq.n	80033fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b80      	cmp	r3, #128	@ 0x80
 80033b6:	d020      	beq.n	80033fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b40      	cmp	r3, #64	@ 0x40
 80033bc:	d01d      	beq.n	80033fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d116      	bne.n	80033fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f81d 	bl	8003422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2208      	movs	r2, #8
 80033ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e00f      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	429a      	cmp	r2, r3
 8003416:	d0b4      	beq.n	8003382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003422:	b480      	push	{r7}
 8003424:	b095      	sub	sp, #84	@ 0x54
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	330c      	adds	r3, #12
 8003430:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003434:	e853 3f00 	ldrex	r3, [r3]
 8003438:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800343a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	330c      	adds	r3, #12
 8003448:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800344a:	643a      	str	r2, [r7, #64]	@ 0x40
 800344c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003450:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003452:	e841 2300 	strex	r3, r2, [r1]
 8003456:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1e5      	bne.n	800342a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3314      	adds	r3, #20
 8003464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	e853 3f00 	ldrex	r3, [r3]
 800346c:	61fb      	str	r3, [r7, #28]
   return(result);
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3314      	adds	r3, #20
 800347c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800347e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003480:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e5      	bne.n	800345e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	2b01      	cmp	r3, #1
 8003498:	d119      	bne.n	80034ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	330c      	adds	r3, #12
 80034a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f023 0310 	bic.w	r3, r3, #16
 80034b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	330c      	adds	r3, #12
 80034b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034ba:	61ba      	str	r2, [r7, #24]
 80034bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034be:	6979      	ldr	r1, [r7, #20]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	e841 2300 	strex	r3, r2, [r1]
 80034c6:	613b      	str	r3, [r7, #16]
   return(result);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1e5      	bne.n	800349a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034dc:	bf00      	nop
 80034de:	3754      	adds	r7, #84	@ 0x54
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff ff21 	bl	8003344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800350a:	b480      	push	{r7}
 800350c:	b085      	sub	sp, #20
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b21      	cmp	r3, #33	@ 0x21
 800351c:	d13e      	bne.n	800359c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003526:	d114      	bne.n	8003552 <UART_Transmit_IT+0x48>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d110      	bne.n	8003552 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003544:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	1c9a      	adds	r2, r3, #2
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	621a      	str	r2, [r3, #32]
 8003550:	e008      	b.n	8003564 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	1c59      	adds	r1, r3, #1
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6211      	str	r1, [r2, #32]
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29b      	uxth	r3, r3
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4619      	mov	r1, r3
 8003572:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10f      	bne.n	8003598 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003586:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003596:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	e000      	b.n	800359e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800359c:	2302      	movs	r3, #2
  }
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff fea6 	bl	800331c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b08c      	sub	sp, #48	@ 0x30
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b22      	cmp	r3, #34	@ 0x22
 80035f4:	f040 80aa 	bne.w	800374c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003600:	d115      	bne.n	800362e <UART_Receive_IT+0x54>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d111      	bne.n	800362e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	b29b      	uxth	r3, r3
 8003618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361c:	b29a      	uxth	r2, r3
 800361e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003620:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003626:	1c9a      	adds	r2, r3, #2
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	629a      	str	r2, [r3, #40]	@ 0x28
 800362c:	e024      	b.n	8003678 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003632:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800363c:	d007      	beq.n	800364e <UART_Receive_IT+0x74>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <UART_Receive_IT+0x82>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	b2da      	uxtb	r2, r3
 8003656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e008      	b.n	800366e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003668:	b2da      	uxtb	r2, r3
 800366a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29b      	uxth	r3, r3
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4619      	mov	r1, r3
 8003686:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003688:	2b00      	cmp	r3, #0
 800368a:	d15d      	bne.n	8003748 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0220 	bic.w	r2, r2, #32
 800369a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d135      	bne.n	800373e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	330c      	adds	r3, #12
 80036de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	e853 3f00 	ldrex	r3, [r3]
 80036e6:	613b      	str	r3, [r7, #16]
   return(result);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f023 0310 	bic.w	r3, r3, #16
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	330c      	adds	r3, #12
 80036f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f8:	623a      	str	r2, [r7, #32]
 80036fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fc:	69f9      	ldr	r1, [r7, #28]
 80036fe:	6a3a      	ldr	r2, [r7, #32]
 8003700:	e841 2300 	strex	r3, r2, [r1]
 8003704:	61bb      	str	r3, [r7, #24]
   return(result);
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e5      	bne.n	80036d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b10      	cmp	r3, #16
 8003718:	d10a      	bne.n	8003730 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff fe0e 	bl	8003358 <HAL_UARTEx_RxEventCallback>
 800373c:	e002      	b.n	8003744 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fdf6 	bl	8003330 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e002      	b.n	800374e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	e000      	b.n	800374e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800374c:	2302      	movs	r3, #2
  }
}
 800374e:	4618      	mov	r0, r3
 8003750:	3730      	adds	r7, #48	@ 0x30
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800375c:	b0c0      	sub	sp, #256	@ 0x100
 800375e:	af00      	add	r7, sp, #0
 8003760:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003774:	68d9      	ldr	r1, [r3, #12]
 8003776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	ea40 0301 	orr.w	r3, r0, r1
 8003780:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	431a      	orrs	r2, r3
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	431a      	orrs	r2, r3
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037b0:	f021 010c 	bic.w	r1, r1, #12
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037be:	430b      	orrs	r3, r1
 80037c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d2:	6999      	ldr	r1, [r3, #24]
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	ea40 0301 	orr.w	r3, r0, r1
 80037de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b8f      	ldr	r3, [pc, #572]	@ (8003a24 <UART_SetConfig+0x2cc>)
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d005      	beq.n	80037f8 <UART_SetConfig+0xa0>
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b8d      	ldr	r3, [pc, #564]	@ (8003a28 <UART_SetConfig+0x2d0>)
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d104      	bne.n	8003802 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037f8:	f7fe fda4 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 80037fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003800:	e003      	b.n	800380a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003802:	f7fe fd8b 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8003806:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003814:	f040 810c 	bne.w	8003a30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800381c:	2200      	movs	r2, #0
 800381e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003822:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003826:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800382a:	4622      	mov	r2, r4
 800382c:	462b      	mov	r3, r5
 800382e:	1891      	adds	r1, r2, r2
 8003830:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003832:	415b      	adcs	r3, r3
 8003834:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003836:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800383a:	4621      	mov	r1, r4
 800383c:	eb12 0801 	adds.w	r8, r2, r1
 8003840:	4629      	mov	r1, r5
 8003842:	eb43 0901 	adc.w	r9, r3, r1
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800385a:	4690      	mov	r8, r2
 800385c:	4699      	mov	r9, r3
 800385e:	4623      	mov	r3, r4
 8003860:	eb18 0303 	adds.w	r3, r8, r3
 8003864:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003868:	462b      	mov	r3, r5
 800386a:	eb49 0303 	adc.w	r3, r9, r3
 800386e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800387e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003882:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003886:	460b      	mov	r3, r1
 8003888:	18db      	adds	r3, r3, r3
 800388a:	653b      	str	r3, [r7, #80]	@ 0x50
 800388c:	4613      	mov	r3, r2
 800388e:	eb42 0303 	adc.w	r3, r2, r3
 8003892:	657b      	str	r3, [r7, #84]	@ 0x54
 8003894:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003898:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800389c:	f7fc fc9c 	bl	80001d8 <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4b61      	ldr	r3, [pc, #388]	@ (8003a2c <UART_SetConfig+0x2d4>)
 80038a6:	fba3 2302 	umull	r2, r3, r3, r2
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	011c      	lsls	r4, r3, #4
 80038ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038c0:	4642      	mov	r2, r8
 80038c2:	464b      	mov	r3, r9
 80038c4:	1891      	adds	r1, r2, r2
 80038c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038c8:	415b      	adcs	r3, r3
 80038ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038d0:	4641      	mov	r1, r8
 80038d2:	eb12 0a01 	adds.w	sl, r2, r1
 80038d6:	4649      	mov	r1, r9
 80038d8:	eb43 0b01 	adc.w	fp, r3, r1
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038f0:	4692      	mov	sl, r2
 80038f2:	469b      	mov	fp, r3
 80038f4:	4643      	mov	r3, r8
 80038f6:	eb1a 0303 	adds.w	r3, sl, r3
 80038fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038fe:	464b      	mov	r3, r9
 8003900:	eb4b 0303 	adc.w	r3, fp, r3
 8003904:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003914:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003918:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800391c:	460b      	mov	r3, r1
 800391e:	18db      	adds	r3, r3, r3
 8003920:	643b      	str	r3, [r7, #64]	@ 0x40
 8003922:	4613      	mov	r3, r2
 8003924:	eb42 0303 	adc.w	r3, r2, r3
 8003928:	647b      	str	r3, [r7, #68]	@ 0x44
 800392a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800392e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003932:	f7fc fc51 	bl	80001d8 <__aeabi_uldivmod>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4611      	mov	r1, r2
 800393c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a2c <UART_SetConfig+0x2d4>)
 800393e:	fba3 2301 	umull	r2, r3, r3, r1
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	2264      	movs	r2, #100	@ 0x64
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	1acb      	subs	r3, r1, r3
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003952:	4b36      	ldr	r3, [pc, #216]	@ (8003a2c <UART_SetConfig+0x2d4>)
 8003954:	fba3 2302 	umull	r2, r3, r3, r2
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003960:	441c      	add	r4, r3
 8003962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003966:	2200      	movs	r2, #0
 8003968:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800396c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003970:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003974:	4642      	mov	r2, r8
 8003976:	464b      	mov	r3, r9
 8003978:	1891      	adds	r1, r2, r2
 800397a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800397c:	415b      	adcs	r3, r3
 800397e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003984:	4641      	mov	r1, r8
 8003986:	1851      	adds	r1, r2, r1
 8003988:	6339      	str	r1, [r7, #48]	@ 0x30
 800398a:	4649      	mov	r1, r9
 800398c:	414b      	adcs	r3, r1
 800398e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800399c:	4659      	mov	r1, fp
 800399e:	00cb      	lsls	r3, r1, #3
 80039a0:	4651      	mov	r1, sl
 80039a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a6:	4651      	mov	r1, sl
 80039a8:	00ca      	lsls	r2, r1, #3
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	4642      	mov	r2, r8
 80039b2:	189b      	adds	r3, r3, r2
 80039b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039b8:	464b      	mov	r3, r9
 80039ba:	460a      	mov	r2, r1
 80039bc:	eb42 0303 	adc.w	r3, r2, r3
 80039c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039d8:	460b      	mov	r3, r1
 80039da:	18db      	adds	r3, r3, r3
 80039dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039de:	4613      	mov	r3, r2
 80039e0:	eb42 0303 	adc.w	r3, r2, r3
 80039e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039ee:	f7fc fbf3 	bl	80001d8 <__aeabi_uldivmod>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a2c <UART_SetConfig+0x2d4>)
 80039f8:	fba3 1302 	umull	r1, r3, r3, r2
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	2164      	movs	r1, #100	@ 0x64
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	3332      	adds	r3, #50	@ 0x32
 8003a0a:	4a08      	ldr	r2, [pc, #32]	@ (8003a2c <UART_SetConfig+0x2d4>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	f003 0207 	and.w	r2, r3, #7
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4422      	add	r2, r4
 8003a1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a20:	e106      	b.n	8003c30 <UART_SetConfig+0x4d8>
 8003a22:	bf00      	nop
 8003a24:	40011000 	.word	0x40011000
 8003a28:	40011400 	.word	0x40011400
 8003a2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a34:	2200      	movs	r2, #0
 8003a36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a42:	4642      	mov	r2, r8
 8003a44:	464b      	mov	r3, r9
 8003a46:	1891      	adds	r1, r2, r2
 8003a48:	6239      	str	r1, [r7, #32]
 8003a4a:	415b      	adcs	r3, r3
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a52:	4641      	mov	r1, r8
 8003a54:	1854      	adds	r4, r2, r1
 8003a56:	4649      	mov	r1, r9
 8003a58:	eb43 0501 	adc.w	r5, r3, r1
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	00eb      	lsls	r3, r5, #3
 8003a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a6a:	00e2      	lsls	r2, r4, #3
 8003a6c:	4614      	mov	r4, r2
 8003a6e:	461d      	mov	r5, r3
 8003a70:	4643      	mov	r3, r8
 8003a72:	18e3      	adds	r3, r4, r3
 8003a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a78:	464b      	mov	r3, r9
 8003a7a:	eb45 0303 	adc.w	r3, r5, r3
 8003a7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	008b      	lsls	r3, r1, #2
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	008a      	lsls	r2, r1, #2
 8003aac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ab0:	f7fc fb92 	bl	80001d8 <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4b60      	ldr	r3, [pc, #384]	@ (8003c3c <UART_SetConfig+0x4e4>)
 8003aba:	fba3 2302 	umull	r2, r3, r3, r2
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	011c      	lsls	r4, r3, #4
 8003ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003acc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ad0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	1891      	adds	r1, r2, r2
 8003ada:	61b9      	str	r1, [r7, #24]
 8003adc:	415b      	adcs	r3, r3
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	1851      	adds	r1, r2, r1
 8003ae8:	6139      	str	r1, [r7, #16]
 8003aea:	4649      	mov	r1, r9
 8003aec:	414b      	adcs	r3, r1
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003afc:	4659      	mov	r1, fp
 8003afe:	00cb      	lsls	r3, r1, #3
 8003b00:	4651      	mov	r1, sl
 8003b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b06:	4651      	mov	r1, sl
 8003b08:	00ca      	lsls	r2, r1, #3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4642      	mov	r2, r8
 8003b12:	189b      	adds	r3, r3, r2
 8003b14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b18:	464b      	mov	r3, r9
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	eb42 0303 	adc.w	r3, r2, r3
 8003b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b3c:	4649      	mov	r1, r9
 8003b3e:	008b      	lsls	r3, r1, #2
 8003b40:	4641      	mov	r1, r8
 8003b42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b46:	4641      	mov	r1, r8
 8003b48:	008a      	lsls	r2, r1, #2
 8003b4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b4e:	f7fc fb43 	bl	80001d8 <__aeabi_uldivmod>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	4b38      	ldr	r3, [pc, #224]	@ (8003c3c <UART_SetConfig+0x4e4>)
 8003b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2264      	movs	r2, #100	@ 0x64
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	1acb      	subs	r3, r1, r3
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	3332      	adds	r3, #50	@ 0x32
 8003b6c:	4a33      	ldr	r2, [pc, #204]	@ (8003c3c <UART_SetConfig+0x4e4>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b78:	441c      	add	r4, r3
 8003b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b7e:	2200      	movs	r2, #0
 8003b80:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b82:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b88:	4642      	mov	r2, r8
 8003b8a:	464b      	mov	r3, r9
 8003b8c:	1891      	adds	r1, r2, r2
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	415b      	adcs	r3, r3
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b98:	4641      	mov	r1, r8
 8003b9a:	1851      	adds	r1, r2, r1
 8003b9c:	6039      	str	r1, [r7, #0]
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	414b      	adcs	r3, r1
 8003ba2:	607b      	str	r3, [r7, #4]
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bb0:	4659      	mov	r1, fp
 8003bb2:	00cb      	lsls	r3, r1, #3
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bba:	4651      	mov	r1, sl
 8003bbc:	00ca      	lsls	r2, r1, #3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	189b      	adds	r3, r3, r2
 8003bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bca:	464b      	mov	r3, r9
 8003bcc:	460a      	mov	r2, r1
 8003bce:	eb42 0303 	adc.w	r3, r2, r3
 8003bd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bde:	667a      	str	r2, [r7, #100]	@ 0x64
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bec:	4649      	mov	r1, r9
 8003bee:	008b      	lsls	r3, r1, #2
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf6:	4641      	mov	r1, r8
 8003bf8:	008a      	lsls	r2, r1, #2
 8003bfa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bfe:	f7fc faeb 	bl	80001d8 <__aeabi_uldivmod>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4b0d      	ldr	r3, [pc, #52]	@ (8003c3c <UART_SetConfig+0x4e4>)
 8003c08:	fba3 1302 	umull	r1, r3, r3, r2
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	2164      	movs	r1, #100	@ 0x64
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	3332      	adds	r3, #50	@ 0x32
 8003c1a:	4a08      	ldr	r2, [pc, #32]	@ (8003c3c <UART_SetConfig+0x4e4>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	f003 020f 	and.w	r2, r3, #15
 8003c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4422      	add	r2, r4
 8003c2e:	609a      	str	r2, [r3, #8]
}
 8003c30:	bf00      	nop
 8003c32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c36:	46bd      	mov	sp, r7
 8003c38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c3c:	51eb851f 	.word	0x51eb851f

08003c40 <memset>:
 8003c40:	4402      	add	r2, r0
 8003c42:	4603      	mov	r3, r0
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d100      	bne.n	8003c4a <memset+0xa>
 8003c48:	4770      	bx	lr
 8003c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4e:	e7f9      	b.n	8003c44 <memset+0x4>

08003c50 <__libc_init_array>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4d0d      	ldr	r5, [pc, #52]	@ (8003c88 <__libc_init_array+0x38>)
 8003c54:	4c0d      	ldr	r4, [pc, #52]	@ (8003c8c <__libc_init_array+0x3c>)
 8003c56:	1b64      	subs	r4, r4, r5
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	42a6      	cmp	r6, r4
 8003c5e:	d109      	bne.n	8003c74 <__libc_init_array+0x24>
 8003c60:	4d0b      	ldr	r5, [pc, #44]	@ (8003c90 <__libc_init_array+0x40>)
 8003c62:	4c0c      	ldr	r4, [pc, #48]	@ (8003c94 <__libc_init_array+0x44>)
 8003c64:	f000 f818 	bl	8003c98 <_init>
 8003c68:	1b64      	subs	r4, r4, r5
 8003c6a:	10a4      	asrs	r4, r4, #2
 8003c6c:	2600      	movs	r6, #0
 8003c6e:	42a6      	cmp	r6, r4
 8003c70:	d105      	bne.n	8003c7e <__libc_init_array+0x2e>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c78:	4798      	blx	r3
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7ee      	b.n	8003c5c <__libc_init_array+0xc>
 8003c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c82:	4798      	blx	r3
 8003c84:	3601      	adds	r6, #1
 8003c86:	e7f2      	b.n	8003c6e <__libc_init_array+0x1e>
 8003c88:	08003d10 	.word	0x08003d10
 8003c8c:	08003d10 	.word	0x08003d10
 8003c90:	08003d10 	.word	0x08003d10
 8003c94:	08003d14 	.word	0x08003d14

08003c98 <_init>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	bf00      	nop
 8003c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9e:	bc08      	pop	{r3}
 8003ca0:	469e      	mov	lr, r3
 8003ca2:	4770      	bx	lr

08003ca4 <_fini>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	bf00      	nop
 8003ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003caa:	bc08      	pop	{r3}
 8003cac:	469e      	mov	lr, r3
 8003cae:	4770      	bx	lr
